[
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\appendix\\component-report\\build.gradle",
    "contents": "/*\n * This build file was auto generated by running the Gradle 'init' task\n * by 'nobusue' at '14/09/14 12:53' with Gradle 2.1\n *\n * This generated file contains a sample Java project to get you started.\n * For more details take a look at the Java Quickstart chapter in the Gradle\n * user guide available at http://gradle.org/docs/2.1/userguide/tutorial_java_projects.html\n */\n\nplugins {\n  id \"com.github.tkruse.groovysh\" version \"1.0.2\"\n}\n\n// Apply the java plugin to add support for Java\napply plugin: 'java'\n\n// In this section you declare where to find the dependencies of your project\nrepositories {\n    // Use 'jcenter' for resolving your dependencies.\n    // You can declare any Maven/Ivy/file repository here.\n    jcenter()\n}\n\n// In this section you declare the dependencies for your production and test code\ndependencies {\n    // The production code uses the SLF4J logging API at compile time\n    compile 'org.slf4j:slf4j-api:1.7.5'\n\n    // Declare the dependency for your favourite test framework you want to use in your tests.\n    // TestNG is also supported by the Gradle Test task. Just change the\n    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add\n    // 'test.useTestNG()' to your build script.\n    testCompile 'junit:junit:4.11'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\appendix\\component-report\\settings.gradle",
    "contents": "/*\n * This settings file was auto generated by the Gradle buildInit task\n * by 'nobusue' at '14/09/14 12:53' with Gradle 2.1\n *\n * The settings file is used to specify which projects to include in your build.\n * In a single project build this file can be empty or even removed.\n *\n * Detailed information about configuring a multi-project build in Gradle can be found\n * in the user guide at http://gradle.org/docs/2.1/userguide/multi_project_builds.html\n */\n\n/*\n// To declare projects as part of a multi-project build use the 'include' method\ninclude 'shared'\ninclude 'api'\ninclude 'services:webservice'\n*/\n\nrootProject.name = 'component-report'\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter03\\first-gradle\\build.gradle",
    "contents": "// (1) hello 태스크 정의\ntask hello << {\n  // (2) 태스크에 추가하는 처리\n  println 'Hello Gradle world!'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter03\\java-project\\build.gradle",
    "contents": "/*\n * This build file was auto generated by running the Gradle 'init' task\n * by 'xxxx' at '14/08/03 23:10' with Gradle 2.0\n *\n * This generated file contains a sample Java project to get you started.\n * For more details take a look at the Java Quickstart chapter in the Gradle\n * user guide available at http://gradle.org/docs/2.0/userguide/tutorial_java_projects.html\n */\n\n// Apply the java plugin to add support for Java\napply plugin: 'java'\n\n// In this section you declare where to find the dependencies of your project\nrepositories {\n  // Use 'maven central' for resolving your dependencies.\n  // You can declare any Maven/Ivy/file repository here.\n  mavenCentral()\n}\n\n// In this section you declare the dependencies for your production and test code\ndependencies {\n  // The production code uses the SLF4J logging API at compile time\n  compile 'org.slf4j:slf4j-api:1.7.5'\n\n  // Declare the dependency for your favourite test framework you want to use in your tests.\n  // TestNG is also supported by the Gradle Test task. Just change the\n  // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add\n  // 'test.useTestNG()' to your build script.\n  testCompile 'junit:junit:4.11'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter03\\java-project\\settings.gradle",
    "contents": "/*\n * This settings file was auto generated by the Gradle buildInit task\n * by 'xxxx' at '14/08/03 23:10' with Gradle 2.0\n *\n * The settings file is used to specify which projects to include in your build.\n * In a single project build this file can be empty or even removed.\n *\n * Detailed information about configuring a multi-project build in Gradle can be found\n * in the user guide at http://gradle.org/docs/2.0/userguide/multi_project_builds.html\n */\n\n/*\n// To declare projects as part of a multi-project build use the 'include' method\ninclude 'shared'\ninclude 'api'\ninclude 'services:webservice'\n*/\n\nrootProject.name = 'java-project'\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter03\\web-project\\build.gradle",
    "contents": "// (1) Tomcat 플러그인 이용을 위한 설정\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'\n  }\n}\n\n//apply plugin: 'java'\n// (2) War 플러그인 적용\napply plugin: 'war'\n// (3) Tomcat 플러그인 적용\napply plugin: 'com.bmuschko.tomcat'\n\nrepositories {\n  mavenCentral()\n}\n\t\ndependencies {\n  // (4) 의존 관계에 Java EE 6의 API추가\n  providedCompile 'javax:javaee-web-api:6.0'\n  compile 'org.slf4j:slf4j-api:1.7.5'\n  testCompile 'junit:junit:4.11'\n\n  // (5) Tomcat 실행에 필요한 의존 라이브러리 설정\n  def tomcatVersion = '7.0.52'\n    tomcat \"org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}\",\n           \"org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}\"\n    tomcat(\"org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}\") {\n      exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'\n  }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter03\\web-project\\settings.gradle",
    "contents": "/*\n * This settings file was auto generated by the Gradle buildInit task\n * by 'nobusue' at '14/03/23 22:02' with Gradle 1.11\n *\n * The settings file is used to specify which projects to include in your build.\n * In a single project build this file can be empty or even removed.\n *\n * Detailed information about configuring a multi-project build in Gradle can be found\n * in the user guide at http://gradle.org/docs/1.11/userguide/multi_project_builds.html\n */\n\n/*\n// To declare projects as part of a multi-project build use the 'include' method\ninclude 'shared'\ninclude 'api'\ninclude 'services:webservice'\n*/\n\nrootProject.name = 'web-project'\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter04\\add-sourceset\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceSets {\n  integrationTest {\n    compileClasspath = sourceSets.main.output + configurations.testCompile\n    runtimeClasspath = output + compileClasspath + configurations.testCompile\n  }\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  testCompile \"junit:junit:4.11\"\n  integrationTestCompile  \"junit:junit:4.11\"\n  integrationTestRuntime  \"junit:junit:4.11\"\n}\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ntask integrationTest(type: Test) {\n  testClassesDir = sourceSets.integrationTest.output.classesDir\n  classpath = sourceSets.integrationTest.runtimeClasspath\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter04\\arithmetic-lib\\build.gradle",
    "contents": "apply plugin: 'java'\n\ndef defaultEncoding = 'UTF-8'\ncompileJava.options.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\njavadoc {\n  options.links << 'http://docs.oracle.com/javase/jp/7/api/'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter04\\arithmetic-lib_withApplication\\build.gradle",
    "contents": "apply plugin: 'java'\napply plugin: 'application'\n\ndef defaultEncoding = 'UTF-8'\ncompileJava.options.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nmainClassName = 'com.example.cli.SimpleCalc'\napplicationName = 'SimpleCalc'\n\nrepositories {\n\tmavenCentral()\n}\n\ndependencies {\n  compile 'commons-cli:commons-cli:1.2'\n}\n\nrun {\n  standardInput = System.in\n}\n\njavadoc {\n  options.links << 'http://docs.oracle.com/javase/jp/7/api/'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter04\\arithmetic-lib_withTest\\build.gradle",
    "contents": "apply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile \"junit:junit:4.11\"\n}\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n//tasks.withType(JavaCompile) {\n//  options.encoding = defaultEncoding\n//}\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\njavadoc {\n  options.links << 'http://docs.oracle.com/javase/jp/7/api/'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter04\\legacy-prj\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceSets {\n  main {\n    java {\n      srcDir 'src'\n    }\n    resources {\n      srcDir 'src'\n    }\n  }\n}\n\nprocessResources {\n  includeEmptyDirs = false\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\copy-file\\build.gradle",
    "contents": "copy {\n\tfrom 'original'\n\tinto 'replication'\n\n\tinclude 'example.foo', 'example?.bar', '**/*.txt', 'internal/'\n\tincludeEmptyDirs = false\n\t\n\texclude '**/dummy.txt'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\copy-file-with-rename\\build.gradle",
    "contents": "copy {\n\tfrom 'original'\n\tinto 'replication'\n\trename { fileName ->\n\t    if(fileName == 'dummy.txt') {\n\t        fileName.replace('dummy','renamed-file')\n\t    }\n\t}\n\trename '(.*)-template.txt', '$1.txt'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\delete-file\\build.gradle",
    "contents": "delete 'target.txt'\n\ndelete 'target1.txt', 'target2.txt', 'target3.txt'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\file-access\\collection\\build.gradle",
    "contents": "def collections = files('f1.txt', 'f2.txt')\nprintln collections.asPath"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\file-access\\createDir\\build.gradle",
    "contents": "file('f1.txt').write('あああああ')\nfile('f2.txt').write('あああああ', 'UTF-8')"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\file-expand\\build.gradle",
    "contents": "String targetName = 'SimpleBean'\ncopy {\n    from 'template'\n\tinto 'output'\n\t\n\texpand packageName:'com.example.bean', className:targetName, \n\t      fields:['String':'name', 'int':'value']\n\n\trename 'template.java', \"${targetName}.java\"\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\file-filter\\build.gradle",
    "contents": "String targetName = 'ConcreteVo'\ncopy {\n    from 'template'\n\tinto 'output'\n\tfilter { line ->\n\t    line.replaceAll 'VALUE_OBJECT_NAME', \"${targetName}\"\n\t    line.replaceAll 'AUTHOR_NAME', 'Gradle2.0 빌드 스크립트'\n\t}\n\tfilter org.apache.tools.ant.filters.TabsToSpaces, tablength: 4\n\trename 'template.java', \"${targetName}.java\"\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\file-reference\\build.gradle",
    "contents": "File mainJava = file('src/main/java/Main.java')\nprintln mainJava.absolutePath\n\nFile dummyFile = file(new File('src/dummy.txt'))\nprintln dummyFile.path\n\n\nFile index = null\n\nURL url = new URL('file:/index.html')\nindex = file(url)\nprintln index.path\n\nURI uri = new URI('file:/index.html')\nindex = file(uri)\nprintln index.path\n\n\nimport java.util.concurrent.Callable\n\nindex = file(new Callable<String>() {\n    String call() {\n        '/index.html'\n    }\n})\nprintln index.path\n\nindex = file { '/index.html' }\nprintln index.path\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileCollection\\as-path\\build.gradle",
    "contents": "FileCollection libraries = files('lib1.jar', 'lib2.jar')\n// getAsPath()의 Groovy 간략 기법\nString librariesPath = libraries.asPath\nprintln librariesPath\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileCollection\\convert\\build.gradle",
    "contents": "FileCollection collections = files('file1.txt', 'file2.txt', 'file3.txt')\n\n// as 연산자를 이용한 변환\nList list = collections as List\nSet set1 = collections as Set\nFile[] array = collections as File[]\n\n// getFiles()의 Groovy 간략 기법\nSet set2 = collections.files\n\nprintln list\nprintln set1\nprintln array\nprintln set2"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileCollection\\filtering\\build.gradle",
    "contents": "FileCollection collections = files('file1.txt', 'file2.txt', new URL('file:/index.html'))\nFileCollection textFiles = collections.filter { collectionFile ->\n\tcollectionFile.name.endsWith '.txt'\n}\nassert textFiles.files.size() == 2\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileCollection\\get-collection\\build.gradle",
    "contents": "FileCollection collections = files('file1.txt', 'file2.txt')\n\n// 異なる型をまとめて渡してファイルコレクションとする\ncollections = files('file1.txt', new File('file2.txt'), new URL('file:/index.html'))\n\nprintln collections\n\nList fileList = [new File('file1.txt'), new File('file2.txt')]\n// List型で渡す\ncollections = files(fileList)\n// 配列で渡す\ncollections = files(fileList as File[])\n\nprintln collections"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileCollection\\lazy-evalutaion\\build.gradle",
    "contents": "import java.util.concurrent.Callable\n\nFileCollection orgCollection = null\nFileCollection newCollection = files( new Callable<List<File>>() {\n    List<File> call() {\n        println '-- callable#call --'\n        orgCollection as List\n    }\n})\nprintln '-- before set file --'\n\norgCollection = files('internal')\n\nprintln '-- after set file --'\n\nprintln newCollection.singleFile\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileCollection\\operation\\build.gradle",
    "contents": "ConfigurableFileCollection collections1 = files('file1.txt')\n\nFileCollection collections2 = collections1 + files('file2.txt')\nassert collections2.files.size() == 2\n\ncollections1 == collections2 - files('file2.txt')\nassert collections1.files.size() == 1\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileCollection\\other\\build.gradle",
    "contents": "FileCollection tempCollection = files('file1.txt')\nFile file1 = tempCollection.singleFile\n\n// ファイルコレクションが空でなく、'file1.txt'が含まれていたらファイルを削除する。\nif(!tempCollection.isEmpty() && tempCollection.contains(file1)) {\n    tempCollection -= files(file1) \n}\n// 空だったら、StopExecutionException をスローする。\ntempCollection.stopExecutionIfEmpty()\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileTree\\build.gradle",
    "contents": "FileTree sourceFiles = fileTree('src')\nsourceFiles.each { println it.name }\n\nprintln '-- include *.java --'\nFileTree javaFiles = sourceFiles.include '**/*.java'\njavaFiles.each { println it.name }\n\nprintln '-- exclude Something.java --'\nFileTree excluded = javaFiles.exclude('**/Something.java')\nexcluded.each { println it.name }\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileTree\\closure.gradle",
    "contents": "FileTree tree = fileTree('src') {\n    include '**/*.java'\n    exclude '**/Something.java'\n}\ntree.each { println it.name }"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileTree\\map.gradle",
    "contents": "FileTree tree = fileTree(dir: 'src', include: '**/*.java', exclude: '**/Something.java')\ntree.each { println it.name }\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileTree\\matching.gradle",
    "contents": "FileTree tree = fileTree('src')\nFileTree javaFiles = tree.matching { include '**/*.java' }\njavaFiles.each { println it.name }\n\nFileTree nonJavaFiles = tree.matching { exclude '**/*.java' }\nnonJavaFiles.each { println it.name }\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileTree\\visit-by-closure.gradle",
    "contents": "FileTree tree = fileTree('src')\ntree.visit { fileDetails ->\n    println 'name: ' + fileDetails.getName()\n    if(fileDetails.isDirectory()) {\n      println 'path: ' + fileDetails.getPath()\n    } else {\n      println 'file size: ' + fileDetails.getSize()\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\fileTree\\visit-by-fileVisitor.gradle",
    "contents": "FileTree tree = fileTree('src')\ntree.visit(new FileVisitor() {\n    void visitDir(FileVisitDetails fileDetails) {\n      println 'name: ' + fileDetails.getName()\n      println 'path: ' + fileDetails.getPath()\n    }\n\n    void visitFile(FileVisitDetails fileDetails) {\n      println 'name: ' + fileDetails.getName()\n      println 'file size: ' + fileDetails.getSize()\n    }\n})\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\gradle-basic\\build.gradle",
    "contents": "task greet << { println 'Hello, ' + user }"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\logging\\build.gradle",
    "contents": "task showLogInfo << {\n    println  '************ showLogInfo task executing ************'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\logging\\loglevel.gradle",
    "contents": "logger.error '에러 메시지'\nlogger.quiet '중요 메시지'\nlogger.warn '경고 메시지'\nlogger.lifecycle '빌드 진행 상황을 보여주는 메시지'\nlogger.info '정보 메시지'\nlogger.debug '디버그 메시지'\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\make-directory\\build.gradle",
    "contents": "mkdir 'parent/child/grandchild'\nmkdir '../outOfTheProject'\nmkdir '/gradle-book/absolutePathDir'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\modify-loglevel\\build.gradle",
    "contents": "logging.captureStandardOutput LogLevel.INFO\nlogging.captureStandardError LogLevel.INFO\nprintln '표준 출력'\nSystem.err.println '표준 오류'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\nest-copy\\build.gradle",
    "contents": "copy {\n    into 'replication'\n    exclude '**/dummy.txt'\n\n    from('original') {\n        exclude 'sub1/', 'sub2/'\n    }\n    into('internal') {\n        from 'original/sub1', 'original/sub2'\n    }\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\path-validation\\build.gradle",
    "contents": "File existDir = file('src/main/existDir', PathValidation.DIRECTORY)"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\settings\\build.gradle",
    "contents": "tasks.whenTaskAdded { task ->\n    println task.name\n}\n\ntask todo << { println 'execute task: ' + name }\n\ntask doing << { println 'execute task: ' + name }\n\ntask done << { println 'execute task: ' + name }\n\ndoing.dependsOn todo\ndone.dependsOn doing\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\settings\\settings.gradle",
    "contents": "println rootDir\nprintln rootProject.name"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\taskgraph\\build.gradle",
    "contents": "tasks.whenTaskAdded { task ->\n    println task.name\n}\n\ntask todo << { println 'execute task: ' + name }\n\ntask doing << { println 'execute task: ' + name }\n\ntask done << { println 'execute task: ' + name }\n\ndoing.dependsOn todo\ndone.dependsOn doing\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter05\\taskgraph-order\\build.gradle",
    "contents": "tasks.whenTaskAdded { task ->\n    println task.name\n}\n\ntask todo << { println 'execute task: ' + name }\n\ntask doing << { println 'execute task: ' + name }\n\ntask done << { println 'execute task: ' + name }\n\n//doing.shouldRunAfter todo\ndone.dependsOn doing\n//doing.mustRunAfter done\ndoing.shouldRunAfter done"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section01\\project-properties\\build.gradle",
    "contents": "task greet << {\n    println message\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section01\\script-block-explaination\\build.gradle",
    "contents": "println '기본 의존 관계：'\nrepositories.each { println it.name }\n\n// Gradle DSL\n/*\nrepositories {\n    mavenCentral()\n}\n*/\n\n// Groovy 형식\n//def closure = { mavenCentral() }\n//this.repositories(closure)\n\n// Gradle Domain Object\nRepositoryHandler repos = this.getRepositories()\nrepos.mavenCentral()\n\nprintln 'Maven Central 리포지토리 추가 후：'\nrepositories.each { println it.name }"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section01\\script-structure\\build.gradle",
    "contents": "  class Descriptor {\n    String show() {\n      '*** 이것은 Groovy입니다. ***'\n    }\n  }\n  println new Descriptor().show()"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section01\\system-properties\\build.gradle",
    "contents": "task greet << {\n    println System.properties['message']\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section01\\variables\\build.gradle",
    "contents": "\nimport java.sql.Timestamp\n\ndef date = new Date()\nprintln date\n\nTimestamp ts = new Timestamp(date.getTime())\nprintln ts\n\n  def scriptScope = 'SCRIPT'\n\n  task getMessage() << {\n    def taskScope = 'TASK'\n    if(message) {\n      println scriptScope + ':' + taskScope + ':' + message\n    } else {\n      def localScope = 'LOCAL'\n      println scriptScope + ':' + taskScope + ':' + localScope\n    }\n  }\n\n  println scriptScope\n//  println taskScope   // 범위 밖\n//  println localScope  // 범위 밖"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\default-task\\build.gradle",
    "contents": "defaultTasks 'showProjectName'\n\n// 여러 태스크를 지정하는 경우\n//defaultTasks = ['showProjectName','showDescription']\n\nproject.description = '기본 태스크 설명을 위한 프로젝트'\n\ntask showProjectName << {\n\tprintln project.name\n}\n\ntask showDescription << {\n\tprintln project.description\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\extensionAware-object\\build.gradle",
    "contents": "class MutableObject {\n\tprivate String property\n\n\tString getProperty() { return property; }\n\n\tvoid setProperty(String property) {\n\t    this.property = property\n\t}\n}\n\nproject.extensions.create('mutable', MutableObject)\nproject.mutable.property = 'MutableObjectです。'\n\ntask showMutableObject << {\n    println project.mutable.property\n}\n\n\nclass ImmutableObject {\n\tprivate String property\n\n\tImmutableObject(String property) {\n\t    this.property = property\n\t}\n\n\tString getProperty() { return property; }\n}\n\nextensions.create('imutable', ImmutableObject, 'ImmutableObjectです。')\n\ntask showImmutableObject << {\n\tprintln imutable.property\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\extraPropertiesExtension-object\\build.gradle",
    "contents": "// ExtraPropertiesExtension\nproject.ext.set('property', 'ext에 추가한 속성이다.')\n\nif(project.ext.has('property')) {\n    println '확장 속성의 값: ' + project.ext.get('property')\n}\n\n// Groovy 속성 참조\nproject.ext.property = 'ext에 추가한 속성이다.。'\nprintln '확장 속성의 값: ' + project.property\n\n// Map 리터럴 형식\nproject.ext['property'] = 'ext에 추가한 속성이다.'\nprintln '확장 속성의 값: ' + project.ext['property']\n\n// 클로저를 사용한 설정\nproject.ext {\n    prop1 = 'aaa'\n    prop2 = 'bbb'\n}\nprintln project.ext.prop1 + project.ext.prop2\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\gradle-object\\init-callback.gradle",
    "contents": "// gradle 을 생략\nsettingsEvaluated {\n    println '1. settingsEvaluated'\n}\n\nprojectsLoaded {\n    println '2. projectsLoaded'\n}\n\nbeforeProject {\n    println '3. beforeProject'\n}\n\nafterProject {\n    println '4. afterProject'    \n}\n\nprojectsEvaluated {\n    println '5. projectsEvaluated'\n}\n\nbuildFinished {\n    println '6. buildFinished'    \n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\gradle-object\\init.gradle",
    "contents": "class MyTaskActionListener implements TaskActionListener {\n    void beforeActions(Task task) {\n        println '-- ' + task.name + '태스크 액션 실행 전 --'\n    }\n    void afterActions(Task task) {\n        println '-- ' + task.name + '태스크 액션 실행 후 --'\n    }\t\n}\n\n//gradle.addListener(new MyTaskActionListener())"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\project-object\\init.gradle",
    "contents": "gradle.allprojects { project ->\n    project.beforeEvaluate {\n        println project.name + '프로젝트를 평가한다.'\n    }\n    project.afterEvaluate {\n        println project.name + '프로젝트를 평가했다.'\n    }\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\project-object\\project-reference.gradle",
    "contents": "def childInstance = project(':child')\nchildInstance.description = '자식 프로젝트의 설명을 설정한다.'\n\n// 오버로드 메서드의 경우\n/*\nproject(':child') {\n    description = '자식 프로젝트의 설명을 설정한다.'\n}\n*/"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\project-object\\settings.gradle",
    "contents": "include 'child'\n\ngradle.allprojects { project ->\n    if(project.name == 'methods-desc') {\n        project.beforeEvaluate {\n            println project.name + '프로젝트를 평가한다.'\n        }\n        project.afterEvaluate {\n            println project.name + '프로젝트를 평가했다.'\n        }\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\project-object\\task-definition.gradle",
    "contents": "task hello << {\n    println 'Hello Gradle world!'\n}\n\n// API 형식\n//def helloTask = task('hello')\n//helloTask << { println 'Hello Gradle world!' }"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\settings-object\\application-project\\application.gradle",
    "contents": "task showBuildFileName << {\n\tprintln buildFile.name\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\settings-object\\domain-project\\domain.gradle",
    "contents": "task showBuildFileName << {\n\tprintln buildFile.name\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\settings-object\\infrastructure-project\\infrastructure.gradle",
    "contents": "task showBuildFileName << {\n\tprintln buildFile.name\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\settings-object\\presentation-project\\presentation.gradle",
    "contents": "task showBuildFileName << {\n\tprintln buildFile.name\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\settings-object\\settings.gradle",
    "contents": "include 'presentation-project', 'application-project', 'domain-project', 'infrastructure-project'\n\nrootProject.children.each { project ->\n    def layerName = project.name.replaceAll('-project', '')\n    def buildScriptFile = \"${layerName}.gradle\"\n    project.buildFileName = buildScriptFile\n\n    println \"프로젝트/빌드 스크립트명:: ${project.name}／${buildScriptFile}\"\n}\n\nprintln findProject(':invalid-path')\nprintln project(':invalid-path')"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\task-object\\main-api.gradle",
    "contents": "task myActionTask {\n    doFirst {\n        println 'First!'\n    }\n}\n\nmyActionTask.doLast {\n    println 'Last!'\n}\n\nmyActionTask << { println 'Last by leftShift!' }\n\nmyActionTask.deleteAllActions()"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section02\\task-object\\property.gradle",
    "contents": "task myTask << {\n    println name\n}\n\nmyTask.group 'help'\nmyTask.description 'myTask입니다.'\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\dynamic-task\\build.gradle",
    "contents": "def instances = ['AppServer': '192.0.2.10', 'DBServer': '192.0.2.20', 'MailServer': '192.0.2.30']\n\ninstances.each { serverType, ipAddress ->\n    task \"show${serverType}\" << {\n        println ipAddress\n    }\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\finalizer-task\\build.gradle",
    "contents": "task normalTask << {\n    println name\n}\n\ntask finalizerTask << {\n    println name\n}\n\ntask problemTask << {\n    throw new Exception('exception')\n}\n  \ntask executionTask << { println name }\n\nnormalTask.finalizedBy finalizerTask\n\n// finalizerTask가 실행된다\n//problemTask.dependsOn normalTask\n//executionTask.dependsOn problemTask\n\n// finalizerTask가 실행되지 않는다\nnormalTask.dependsOn problemTask\nexecutionTask.dependsOn normalTask"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\general-task\\build.gradle",
    "contents": "task myCopy(type: Copy) {\n    from 'original'\n    into 'target'\n}\n\ntask myCopyExtension(type: Copy) {\n    from 'original'\n    into 'target'\n\n    File newFile = file('original/newFile.txt')\n    doFirst {\n      println '복사 대상 파일에 내용을 기록합니다.'\n      newFile.write('복사용 파일입니다.','UTF-8')\n    }\n    doLast {\n      File copied = file('original/newFile_copied.txt')\n      if(newFile.renameTo(copied)) {\n        println '복사를 완료했습니다.'\n      } else {\n        println '복사에 실패했습니다.'\n      }\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\ordering\\build.gradle",
    "contents": "task before << {\n     println '먼저 실행한다'\n}\n  \ntask after << {\n    println '나중에 실행한다'\n}\n  \nafter.mustRunAfter before\n\n// NG\n//before.dependsOn after\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\ordering\\shouldRunAfter.gradle",
    "contents": "task before << {\n     println '먼저 실행한다'\n}\n  \ntask after << {\n    println '나중에 실행한다'\n}\n\nafter.shouldRunAfter before\n\n// OK\n//before.dependsOn after\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\overwrite\\build.gradle",
    "contents": "apply plugin: 'java'\n\ntask assemble(overwrite: true) << {\n  println '덮어쓰기 했습니다'\n}\n\n// InvalidUserDataExceptionがスローされます。\n/*\ntask assemble(overwrite: false) << {\n  println '덮어쓰기 했습니다'\n}\n*/"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\skip-task\\build.gradle",
    "contents": "task specialTask << {\n    println '특별한 처리를 실행합니다'\n}\n\nspecialTask.onlyIf {\n    buildType == 'partial-build'\n}\n\n\ntask skippedIfExceptionOccurred << {\n    println 'start'\n}\n\nskippedIfExceptionOccurred << {\n    if(process == 'error') {\n        throw new StopExecutionException()\n    }\n}\n\nskippedIfExceptionOccurred << {\n    println 'end'\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\task-basic\\build.gradle",
    "contents": "task hello << {\n    println name + ': Hello Gradle world!'\n}\n\ntask hello2 {\n    println name + ': Hello Gradle world!'\n}\n\ntask showDescription << {\n    println description\n}\nshowDescription.description = 'showDescription태스크입니다.'\n\n// 이건 에러 처리된다\n/*\ntask showDescription2.description = 'showDescription2태스크입니다.'\nshowDescription2 << {\n    println description\n}\n*/\n\ntask showDescription3\nshowDescription3.description = 'showDescription3태스크입니다.'\nshowDescription3 << {\n    println description\n}\n\ntask showDescription4 {\n\tdescription = 'showDescription4태스크입니다.'\n\tdoLast {\n\t    println description\n\t}\n}\n\ntask showDescription5(description: 'showDescription5태스크입니다.') << {\n    println description\n}\n\ntask(showDescription6, description: 'showDescription6태스크입니다.') << {\n    println description\n}\n\n\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\task-dependency\\build.gradle",
    "contents": "task todo << {\n     println '미착수'\n}\n\ntask doing << {\n    println '작업중'\n}\n\ntask done << {\n    println '완료'\n}\n\ndoing.dependsOn todo\ndone.dependsOn doing\n\n\ntask reviewing << {\n    println '검토중'\n}\n\n// 여러 태스크에 의존하는 경우\n/*\ntask done(dependsOn: [doing, reviewing]) << {\n    println '완료'\n}\n*/\n\n// 클로저를 사용한 경우合\n/*\ndone.dependsOn {\n  [doing, reviewing]\n}\n*/\n\n// 패턴에 일치하는 것을 의존 관계로 설정하는 경우\n/*\ndone.dependsOn {\n    tasks.findAll { task -> task.name ==~ /.*ing/ }\n}\n*/"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section03\\task-rule\\build.gradle",
    "contents": "apply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.slf4j:slf4j-api:1.7.5'\n    testCompile 'junit:junit:4.11'\n}\n\ntasks.addRule('Pattern: show<TASKS_NAME>: Show task name.') { taskName ->\n  if(taskName.startsWith('show')) {\n    task(taskName) << {\n\t  println '*** ' + taskName + ' ***'\n    }\n  }\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\arithmetic-flat\\arithmetic-main\\build.gradle",
    "contents": "apply plugin: 'application'\n\nmainClassName = 'com.example.cli.SimpleCalc'\napplicationName = 'SimpleCalc'\n  \ndependencies {\n    compile project(':arithmetic-lib')\n}\n  \nrun {\n    standardInput = System.in\n}\n\nproject(':arithmetic-lib') {\n\ttask show << {\n\t    println project.name + ' show()'\n\t}\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\arithmetic-flat\\master\\build.gradle",
    "contents": "subprojects {\n    apply plugin: 'java'\n  \n    def defaultEncoding = 'UTF-8'\n    compileJava.options.encoding = defaultEncoding\n  \n    sourceCompatibility = 1.7\n    targetCompatibility = 1.7\n  \n    javadoc {\n      options.links << 'http://docs.oracle.com/javase/jp/7/api/'\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\arithmetic-flat\\master\\settings.gradle",
    "contents": "includeFlat 'arithmetic-main', 'arithmetic-lib'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\arithmetic-hierarchy\\build.gradle",
    "contents": "// 공통 설정\nsubprojects {\n    apply plugin: 'java'\n  \n    def defaultEncoding = 'UTF-8'\n    compileJava.options.encoding = defaultEncoding\n  \n    sourceCompatibility = 1.7\n    targetCompatibility = 1.7\n  \n    javadoc {\n      options.links << 'http://docs.oracle.com/javase/jp/7/api/'\n    }\n}\n  \n  \n// 라이브러리 프로젝트\nproject('arithmetic-lib') {}\n  \n  \n// 애플리케이션 프로젝트\nproject('arithmetic-main') {\n    apply plugin: 'application'\n  \n    mainClassName = 'com.example.cli.SimpleCalc'\n    applicationName = 'SimpleCalc'\n  \n    dependencies {\n      compile project(':arithmetic-lib')\n    }\n  \n    run {\n      standardInput = System.in\n    }\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\arithmetic-hierarchy\\settings.gradle",
    "contents": "include 'arithmetic-lib', 'arithmetic-main'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\arithmetic-hierarchy-with-task\\build.gradle",
    "contents": "// 공통 설정\nsubprojects {\n    apply plugin: 'java'\n  \n    def defaultEncoding = 'UTF-8'\n    compileJava.options.encoding = defaultEncoding\n  \n    sourceCompatibility = 1.7\n    targetCompatibility = 1.7\n  \n    javadoc {\n      options.links << 'http://docs.oracle.com/javase/jp/7/api/'\n    }\n\n    task commonTask << {\n      println project.name + '의' + name + '태스크입니다.' \n    }\n}\n  \n  \n// 라이브러리 프로젝트\nproject('arithmetic-lib') {\n    task limitedTask << {\n      println project.name + '전용 태스크입니다.'\n    }\n}\n  \n  \n// 애플리케이션 프로젝트\nproject('arithmetic-main') {\n    apply plugin: 'application'\n  \n    mainClassName = 'com.example.cli.SimpleCalc'\n    applicationName = 'SimpleCalc'\n  \n    dependencies {\n      compile project(':arithmetic-lib')\n    }\n  \n    run {\n      standardInput = System.in\n    }\n\n    commonTask {\n        doFirst {\n            println '=' * 20 + \" ${name} start \" + '=' * 20\n        }\n        doLast {\n            println '=' * 20 + \" ${name}  end  \" + '=' * 20\n        }\n        dependsOn ':arithmetic-lib:limitedTask'\n    }\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\arithmetic-hierarchy-with-task\\settings.gradle",
    "contents": "include 'arithmetic-lib', 'arithmetic-main'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\multi-root\\build.gradle",
    "contents": "subprojects {\n  println \"[${project.name}]: ${project.projectDir}\"\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\multi-root\\master\\build.gradle",
    "contents": "subprojects {\n  println \"[${project.name}]: ${project.projectDir}\"\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\multi-root\\master\\settings.gradle",
    "contents": "includeFlat 'child:grandchild:great-grandchild'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter06\\section05\\multi-root\\settings.gradle",
    "contents": "include 'child:grandchild:great-grandchild'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\clientmodule\\build.gradle",
    "contents": "repositories {\n  flatDir {\n    dirs \"libs\"\n  }\n}\n\nconfigurations {\n  conf1\n  testConf1.extendsFrom conf1 // testConf1은 conf의 의존 관계도 포함한다\n}\n\ndependencies {\n  conf1 group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.1'\n  testConf1 module('org.spockframework:spock-core:0.7-groovy-2.0') { // 클라이언트 모듈 설정\n    dependency 'org.codehaus.groovy:groovy-all:2.3.1'\n    dependency 'org.hamcrest:hamcrest-core:1.3'\n    module(group: 'junit', name: 'junit-dep', version: '4.10') {\n      dependency  group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'\n    }\n  }\n}\n\ntask showDeps << {\n  // libs 디렉터리의 groovy-all-2.3.1.jar、spock-core-0.7-groovy-2.0.jar、\n  // hamcrest-core-1.3.jar、junit-dep-4.10.jar 경로가 출력된다\n  configurations.testConf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\extends-configuration\\build.gradle",
    "contents": "repositories {\n  mavenCentral()\n}\n\nconfigurations {\n  conf1\n  testConf1.extendsFrom conf1 // testConf1은 conf의 의존 관계도 포함한다\n}\n\ndependencies {\n  conf1 group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.1'\n  testConf1 group: 'junit', name: 'junit', version: '4.11'\n}\n\ntask showDeps << {\n  // groovy-all-2.3.1.jar의 경로도 출력된다\n  configurations.testConf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\flat-dir-repositories\\build.gradle",
    "contents": "// build.gradle\n\nconfigurations {\n  conf1\n}\n\nrepositories {\n    flatDir {\n        // 프로젝트 디렉터리의 libs、doc-repo 디렉터리를 리포지토리로 지정\n        dirs \"libs\", \"doc-repo\"\n    }\n}\n\ndependencies {\n  conf1 group: \"org.slf4j\", name: \"slf4j-api\", version: \"1.7.5\"\n  conf1 group: \"junit\", name: \"junit\", version: \"4.11\"\n  conf1 name: \"index\", ext: \"html\"\n}\n\ntask showDeps << {\n  // conf1에 설정된 의존 관계의 파일 경로를 모두 출력한다\n  configurations.conf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\geregere\\build.gradle",
    "contents": "// geregere/build.gradle\n\ngroup = \"geregere\"\nversion = 0.1\n\nconfigurations {\n    conf1\n    conf2\n}\n\ndependencies {\n  conf1 group: 'com.example', name: 'aaa', version: '0.1'\n  conf2 group: 'com.example', name: 'bbb', version: '0.1'\n}\n\n// ...\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\gradle-api-dependencies\\build.gradle",
    "contents": "configurations {\n  conf1\n}\n\ndependencies {\n  conf1 gradleApi()\n}\n\ntask showDeps << {\n  configurations.conf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\hierarchical-libs-dir\\build.gradle",
    "contents": "// 리스트1\nconfigurations {\n  conf1\n}\n\ndependencies {\n  conf1 fileTree(dir: \"libs\", include: \"**/*.jar\")\n}\n\ntask showDeps << {\n  configurations.conf1.each {\n    println it.absolutePath\n  }\n  //출력\n  // /xxx/xx/libs/sample-lib.jar\n  // /xxx/xx/libs/lib-a/sample-a-lib.jar\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\local-groovy-dependencies\\build.gradle",
    "contents": "configurations {\n  conf1\n}\n\ndependencies {\n  conf1 localGroovy()\n}\n\ntask showDeps << {\n  configurations.conf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\simple-dependencies\\build.gradle",
    "contents": "// 리스트1\nconfigurations {\n  conf1\n}\n\ndependencies {\n  conf1 files(\"libs/sample-lib.jar\")\n}\n\ntask showDeps << {\n  configurations.conf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\simple-dynamic-dependencies\\build.gradle",
    "contents": "configurations {\n  conf1\n}\n\nrepositories {\n  mavenCentral()\n  maven {\n      url \"http://repository.apache.org/content/groups/snapshots\"\n  }\n}\n\n// conf1 컨피겨레이션의 동적 버전 캐시 간격 설정\nconfigurations.conf1.resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'\n// conf1 컨피겨레이션의 변경성 모듈 캐시 간격 설정\nconfigurations.conf1.resolutionStrategy.cacheChangingModulesFor 5, 'hours'\n\ndependencies {\n  conf1 'org.slf4j:slf4j-api:1.7.+' // 1.7 대 버전 중 최신 버전\n  conf1 'commons-cli:commons-cli:latest.integration' // 불안정 버전도 포함해서 최신 버전 취득\n  conf1 'junit:junit:latest.release' // 안전화 버전의 최신판 취득\n}\n\ntask showDeps << {\n  configurations.conf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\simple-explicit-notation\\build.gradle",
    "contents": "configurations {\n  conf1\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  conf1 group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'\n}\n\ntask showDeps << {\n  configurations.conf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\simple-external-dependencies\\build.gradle",
    "contents": "// 리스트2\n\nconfigurations {\n  conf1\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  conf1 'org.slf4j:slf4j-api:1.7.5'\n}\n\ntask showDeps << {\n  configurations.conf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\transitive-conflict-dependencies\\build.gradle",
    "contents": "repositories {\n  mavenCentral()\n}\n\nconfigurations {\n  conf1\n  testConf1.extendsFrom conf1 // testConf1는 conf의 의존 관계를 포함\n}\n\ndependencies {\n  conf1 group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.1'\n  testConf1 group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0'\n}\n\ntask showDeps << {\n  // groovy-all-2.3.1 or groovy-all-2.0.5.jar ?\n  configurations.testConf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\transitive-conflict-fail-dependencies\\build.gradle",
    "contents": "repositories {\n  mavenCentral()\n}\n\nconfigurations {\n  conf1\n  testConf1.extendsFrom conf1 // testConf1는 conf의 의존 관계도 포함\n}\n\nconfigurations.testConf1 {\n  resolutionStrategy {\n    failOnVersionConflict()  // Fail 전략 채택\n  }\n}\n\ndependencies {\n  conf1 group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.1'\n  testConf1 group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0'\n}\n\ntask showDeps << {\n  // A conflict was found between the following modules.. 라는 메시지와 함께 빌드되지 않는다\n  configurations.testConf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\transitive-dependencies\\build.gradle",
    "contents": "repositories {\n  mavenCentral()\n}\n\nconfigurations {\n  testConf1\n}\n\ndependencies {\n  testConf1 group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0'\n}\n\ntask showDeps << {\n  // spock、groovy、junit、hamcrest 경로가 출력된다\n  configurations.testConf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\transitive-exclude\\build.gradle",
    "contents": "repositories {\n  mavenCentral()\n}\n\nconfigurations {\n  conf1\n  testConf1.extendsFrom conf1 // testConf1는 conf의 의존 관계도 포함\n}\n\nconfigurations.testConf1 {\n  resolutionStrategy {\n    failOnVersionConflict()  // Fail 전략 도입\n  }\n}\n\ndependencies {\n  conf1 group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.1'\n  testConf1(group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0') {\n    exclude module: 'groovy-all' // groovy-all은 무시한다\n  }\n}\n\ntask showDeps << {\n  // Groovy는 버전 2.3.1만 남고 버전 경합이 해결된다\n  configurations.testConf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\transitive-forcing-version\\build.gradle",
    "contents": "repositories {\n  mavenCentral()\n}\n\nconfigurations {\n  conf1\n  testConf1.extendsFrom conf1 // testConf1는 conf의 의존 관계도 포함\n}\n\nconfigurations.testConf1 { // 컨피겨레이션 testConf1 설정\n  resolutionStrategy {\n    failOnVersionConflict()  // Fail 전략 도입\n    force 'org.hamcrest:hamcrest-core:1.3' // testConf1에서 Hamcrest가 요구되면 반드시 버전 1.3을 사용한다\n  }\n}\n\ndependencies {\n  conf1(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.1') {\n    force = true // 버전이 경합하면 반드시 의존 관계를 사용한다\n  }\n  testConf1(group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0')\n}\n\ntask showDeps << {\n  // 버전 경합은 모두 해결되며 빌드에 성공한다\n  configurations.testConf1.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\yoreyore\\build-error.gradle",
    "contents": "// yoreyore/build.gradle\n\nrepositories {\n   ivy {\n     url \"http://localhost:8000\"\n     layout 'pattern' , {\n       artifact '[organisation]/[module]/[artifact]-[revision](.[ext])'\n       ivy '[organisation]/[module]/ivy.xml'\n     }\n   }\n}\n\nconfigurations {\n  compile\n}\n\ndependencies {\n  compile group: 'geregere', name: 'geregere', version: '0.1'\n}\n\ntask showDeps << {\n  configurations.compile.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter07\\yoreyore\\build.gradle",
    "contents": "// yoreyore/build.gradle\n\nrepositories {\n   ivy {\n     url \"http://localhost:8000\"\n     layout 'pattern' , {\n       artifact '[organisation]/[module]/[artifact]-[revision](.[ext])'\n       ivy '[organisation]/[module]/ivy.xml'\n     }\n   }\n}\n\nconfigurations {\n  compile\n}\n\ndependencies {\n  compile group: 'geregere', name: 'geregere', version: '0.1', configuration: \"conf1\"\n}\n\ntask showDeps << {\n  configurations.compile.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\book-crud\\build.gradle",
    "contents": "apply plugin: 'war'\napply plugin: 'groovy'\n\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'\n  }\n}\napply plugin: 'com.bmuschko.tomcat-base'\n\next {\n  tomcatStopPort = 8081\n  tomcatStopKey = 'stopKey'\n}\n\nsourceSets {\n    integrationTest {\n        groovy.srcDir file('src/integrationTest/groovy')\n        resources.srcDir file('src/integrationTest/resources')\n        compileClasspath = sourceSets.main.output + configurations.testCompile\n        runtimeClasspath = output + compileClasspath + configurations.testRuntime\n    }\n    functionalTest {\n        groovy.srcDir file('src/functionalTest/groovy')\n        resources.srcDir file('src/functionalTest/resources')\n        compileClasspath = sourceSets.main.output + configurations.testCompile\n        runtimeClasspath = output + compileClasspath + configurations.testRuntime\n    }\n}\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava, compileIntegrationTestGroovy, compileFunctionalTestGroovy]*.options*.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.mybatis:mybatis:3.2.6'\n    compile 'org.mybatis:mybatis-spring:1.2.2'\n    compile 'org.aspectj:aspectjweaver:1.7.4'\n    compile 'org.springframework:spring-context:4.0.3.RELEASE'\n    compile 'org.springframework:spring-webmvc:4.0.3.RELEASE'\n    compile 'org.springframework:spring-jdbc:4.0.3.RELEASE'\n    compile 'org.thymeleaf:thymeleaf:2.1.2.RELEASE'\n    compile 'org.thymeleaf:thymeleaf-spring4:2.1.2.RELEASE'\n    compile 'log4j:log4j:1.2.16'\n    \n    // unit test\n    testCompile 'junit:junit:4.11'\n\ttestCompile 'org.mockito:mockito-core:1.9.5'\n\n    // integration test\n    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'\n    testCompile 'org.spockframework:spock-spring:0.7-groovy-2.0'\n    testCompile 'org.springframework:spring-test:4.0.3.RELEASE'\n    // functional test\n    testCompile \"org.gebish:geb-core:0.9.2\"\n    testCompile 'org.gebish:geb-spock:0.9.2'\n    testCompile \"org.seleniumhq.selenium:selenium-firefox-driver:2.43.1\"\n    testCompile \"org.seleniumhq.selenium:selenium-support:2.43.1\"\n    \n    runtime 'com.h2database:h2:1.3.175'\n    runtime 'org.slf4j:slf4j-api:1.6.1'\n    runtime 'org.slf4j:slf4j-log4j12:1.6.1'\n    \n    def tomcatVersion = '7.0.52'\n    tomcat \"org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}\",\n           \"org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}\"\n    tomcat(\"org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}\") {\n      exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'\n    }\n}\n\ntest {\n    maxParallelForks = 2\n    reports.html.destination = file(\"$reports.html.destination/unit\")\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/unit\")\n}\n\ntask copyEnvironmentResource(type: Copy) {\n\tdescription \"env.properties를 복사한다\"\n\tfrom \"environments/${env}/env.properties\"\n\tinto project.sourceSets.main.output.resourcesDir\n}\nclasses.dependsOn copyEnvironmentResource\n\ntask integrationTest(type: Test) {\n    group = 'verification'\n    testClassesDir = sourceSets.integrationTest.output.classesDir\n    classpath = sourceSets.integrationTest.runtimeClasspath\n    reports.html.destination = file(\"$reports.html.destination/integration\")\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/integration\")\n}\n\ntask tomcatRun4FunctionalTest(type: com.bmuschko.gradle.tomcat.tasks.TomcatRunWar) {\n    stopPort = tomcatStopPort\n    stopKey = tomcatStopKey\n    daemon = true\n}\n\ntask tomcatStop4FunctionalTest(type: com.bmuschko.gradle.tomcat.tasks.TomcatStop) {\n    stopPort = tomcatStopPort\n    stopKey = tomcatStopKey\n}\n\ntask functionalTest(type: Test) {\n    group = 'verification'\n    testClassesDir = sourceSets.functionalTest.output.classesDir\n    classpath = sourceSets.functionalTest.runtimeClasspath\n    reports.html.destination = file(\"$reports.html.destination/functional\")\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/functional\")\n    \n    systemProperty 'geb.env', 'firefox'\n    systemProperty 'geb.build.reportsDir', reporting.file(\"functional/geb\")\n\t\n\tdependsOn tomcatRun4FunctionalTest\n    finalizedBy tomcatStop4FunctionalTest\n\n    minHeapSize = '512m'\n    maxHeapSize = '512m'\n    jvmArgs '-XX:PermSize=128m'\n    jvmArgs '-XX:MaxPermSize=128m'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\book-crud\\initial-build.gradle",
    "contents": "apply plugin: 'war'\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.mybatis:mybatis:3.2.6'\n    compile 'org.mybatis:mybatis-spring:1.2.2'\n    compile 'org.aspectj:aspectjweaver:1.7.4'\n    compile 'org.springframework:spring-context:4.0.3.RELEASE'\n    compile 'org.springframework:spring-webmvc:4.0.3.RELEASE'\n    compile 'org.springframework:spring-jdbc:4.0.3.RELEASE'\n    compile 'org.thymeleaf:thymeleaf:2.1.2.RELEASE'\n    compile 'org.thymeleaf:thymeleaf-spring4:2.1.2.RELEASE'\n    compile 'log4j:log4j:1.2.16'\n    \n    runtime 'com.h2database:h2:1.3.175'\n    runtime 'org.slf4j:slf4j-api:1.6.1'\n    runtime 'org.slf4j:slf4j-log4j12:1.6.1'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\book-crud\\integration-build.gradle",
    "contents": "apply plugin: 'war'\napply plugin: 'groovy'\n\nsourceSets {\n    integrationTest {\n        groovy.srcDir file('src/integrationTest/groovy')\n        resources.srcDir file('src/integrationTest/resources')\n        compileClasspath = sourceSets.main.output + configurations.testCompile\n        runtimeClasspath = output + compileClasspath + configurations.testRuntime\n    }\n}\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava, compileIntegrationTestGroovy]*.options*.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.mybatis:mybatis:3.2.6'\n    compile 'org.mybatis:mybatis-spring:1.2.2'\n    compile 'org.aspectj:aspectjweaver:1.7.4'\n    compile 'org.springframework:spring-context:4.0.3.RELEASE'\n    compile 'org.springframework:spring-webmvc:4.0.3.RELEASE'\n    compile 'org.springframework:spring-jdbc:4.0.3.RELEASE'\n    compile 'org.thymeleaf:thymeleaf:2.1.2.RELEASE'\n    compile 'org.thymeleaf:thymeleaf-spring4:2.1.2.RELEASE'\n    compile 'log4j:log4j:1.2.16'\n    \n    // unit test\n    testCompile 'junit:junit:4.11'\n\ttestCompile 'org.mockito:mockito-core:1.9.5'\n\n    // integration test\n    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'\n    testCompile 'org.spockframework:spock-spring:0.7-groovy-2.0'\n    testCompile 'org.springframework:spring-test:4.0.3.RELEASE'\n    \n    runtime 'com.h2database:h2:1.3.175'\n    runtime 'org.slf4j:slf4j-api:1.6.1'\n    runtime 'org.slf4j:slf4j-log4j12:1.6.1'\n}\n\ntest {\n    maxParallelForks = 2\n    reports.html.destination = file(\"$reports.html.destination/unit\")\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/unit\")\n}\n\ntask copyEnvironmentResource(type: Copy) {\n\tdescription \"env.properties를 복사합니다.\"\n\tfrom \"environments/${env}/env.properties\"\n\tinto project.sourceSets.main.output.resourcesDir\n}\nclasses.dependsOn copyEnvironmentResource\n\ntask integrationTest(type: Test) {\n    group = 'verification'\n    testClassesDir = sourceSets.integrationTest.output.classesDir\n    classpath = sourceSets.integrationTest.runtimeClasspath\n    reports.html.destination = file(\"$reports.html.destination/integration\")\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/integration\")\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\book-crud\\unit-build.gradle",
    "contents": "apply plugin: 'war'\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.mybatis:mybatis:3.2.6'\n    compile 'org.mybatis:mybatis-spring:1.2.2'\n    compile 'org.aspectj:aspectjweaver:1.7.4'\n    compile 'org.springframework:spring-context:4.0.3.RELEASE'\n    compile 'org.springframework:spring-webmvc:4.0.3.RELEASE'\n    compile 'org.springframework:spring-jdbc:4.0.3.RELEASE'\n    compile 'org.thymeleaf:thymeleaf:2.1.2.RELEASE'\n    compile 'org.thymeleaf:thymeleaf-spring4:2.1.2.RELEASE'\n    compile 'log4j:log4j:1.2.16'\n    \n    // unit test\n    testCompile 'junit:junit:4.11'\n\ttestCompile 'org.mockito:mockito-core:1.9.5'\n    \n    runtime 'com.h2database:h2:1.3.175'\n    runtime 'org.slf4j:slf4j-api:1.6.1'\n    runtime 'org.slf4j:slf4j-log4j12:1.6.1'\n}\n\ntest {\n    maxParallelForks = 2\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\execute-test-individually\\build.gradle",
    "contents": "apply plugin: 'java'\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\next.omitDatasource = false\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.11'\n}\n\ntask slowTestOnly(type: Test) {\n\tfilter {\n\t\tincludeTestsMatching 'com.example.*.*Slowly'\n\t}\n}\n\ntask testExecutionWithoutSlowTest(type: Test) {\n\tuseJUnit {\n\t    excludeCategories 'com.example.suite.categories.SlowTests'\n\t}\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\jvm-tuning\\build.gradle",
    "contents": "apply plugin: 'java'\n\ntest {\n\tminHeapSize = '1g'\n\tmaxHeapSize = '1g'\n\tjvmArgs '-XX:+UseG1GC'\n}\n\ntask testForHeapEater(type: Test) {\n\tfilter {\n    \tincludeTestsMatching '*UsingHugeHeapTest'\n\t}\n\tminHeapSize = '1g'\n\tmaxHeapSize = '1g'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\parallel-execution\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  testCompile 'junit:junit:4.11'\n}\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\ntest {\n  maxParallelForks = 5\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\parallel-execution2\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  testCompile 'junit:junit:4.11'\n}\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\ntest {\n//  maxParallelForks = 4\n  maxParallelForks = 3\n  forkEvery = 3\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\separate-test-by-category\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.11'\n}\n\ntest {\n\texclude '**/*Suite.class'\n\tuseJUnit {\n\t\tincludeCategories 'com.example.suite.categories.UnitTests'\n\t}\n\n    reports.html.destination = file(\"${reports.html.destination}/unit\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/unit\")\n}\n\ntask integrationTest(type: Test) {\n\texclude '**/*Suite.class'\n\tuseJUnit {\n\t\tincludeCategories 'com.example.suite.categories.IntegrationTests'\n    }\n\n    reports.html.destination = file(\"${reports.html.destination}/integration\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/integration\")\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\separate-test-by-filter\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.11'\n}\n\ntest {\n\tfilter {\n\t\tincludeTestsMatching '*UT'\n\t}\n\treports.html.destination = file(\"${reports.html.destination}/unit\")\n\treports.junitXml.destination = file(\"${reports.junitXml.destination}/unit\")\n}\n\ntask integrationTest(type: Test) {\n\tfilter {\n\t\tincludeTestsMatching '*IT'\n\t}\n\treports.html.destination = file(\"${reports.html.destination}/integration\")\n\treports.junitXml.destination = file(\"${reports.junitXml.destination}/integration\")\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\separate-test-by-name\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.11'\n}\n\ntest {\n    exclude '**/*IT.class'\n\n    reports.html.destination = file(\"${reports.html.destination}/unit\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/unit\")\n}\n\ntask integrationTest(type: Test) {\n    include '**/*IT.class'\n\n    reports.html.destination = file(\"${reports.html.destination}/integration\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/integration\")\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\separate-test-by-sourceset\\build.gradle",
    "contents": "apply plugin: 'java'\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.11'\n}\n\nsourceSets {\n\tintegrationTest {\n\t    java.srcDir file('src/integrationTest/java')\n\t    compileClasspath = sourceSets.main.output + configurations.testCompile\n\t    runtimeClasspath = compileClasspath + output\n\t}\n}\n\ntest {\n\treports.html.destination = file(\"${reports.html.destination}/unit\")\n\treports.junitXml.destination = file(\"${reports.junitXml.destination}/unit\")\n}\n\ntask integrationTest(type: Test) {\n    testClassesDir = sourceSets.integrationTest.output.classesDir\n    classpath = sourceSets.integrationTest.runtimeClasspath\n    \n    // for report\n    reports.html.destination = file(\"${reports.html.destination}/integration\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/integration\")\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\separate-test-by-suite\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.11'\n\ttestCompile 'org.mockito:mockito-core:1.9.5'\n}\n\ntest {\n\tinclude '**/UnitTestSuite.class'\n\n    reports.html.destination = file(\"${reports.html.destination}/unit\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/unit\")\n}\n\ntask integrationTest(type: Test) {\n\tinclude '**/IntegrationTestSuite.class'\n\n    reports.html.destination = file(\"${reports.html.destination}/integration\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/integration\")\n}\n\ntask smokeTest(type: Test) {\n\tinclude '**/SmokeTestSuite.class'\n\n    reports.html.destination = file(\"${reports.html.destination}/smoke\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/smoke\")\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\switch-env-by-gradle\\build.gradle",
    "contents": "apply from: \"environments/${env}/env.gradle\"\n\ntask showURL << {\n  println \"App Server: ${app_url}\"\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\switch-env-by-gradle\\environments\\dev\\env.gradle",
    "contents": "ext.app_url = 'localhost'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\switch-env-by-gradle\\environments\\production\\env.gradle",
    "contents": "ext.app_url = 'xxx.xxx.xxx.xxx'"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\switch-env-by-group\\build.gradle",
    "contents": "task showURL << {\n  def url = new File('config/env.conf').toURL()\n  def config = new ConfigSlurper(\"$env\").parse(url)\n  println 'App Server: ' + config.app_url\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\switch-env-by-properties\\build.gradle",
    "contents": "// load from properties file.\ntask showURL << {\n  def props = new Properties()\n  props.load(new FileInputStream(\"environments/${env}/env.properties\"))\n  println \"App Server: ${props.app_url}\"\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\test-logging-control\\build.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n\tmavenCentral()\n}\n\ndependencies {\n\tcompile 'org.slf4j:slf4j-api:1.7.7'\n\ttestCompile 'junit:junit:4.11'\n\truntime 'ch.qos.logback:logback-classic:1.1.2'\n}\n\ntest {\n    filter {\n        includeTestsMatching '*succeed*'\n    }\n    testLogging {\n        showStandardStreams = true\n        events 'started', 'skipped', 'failed'\n        displayGranularity = 1\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\test-logging-control\\displayGranularity.gradle",
    "contents": "apply plugin: 'java'\napply plugin: 'eclipse'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.slf4j:slf4j-api:1.7.7'\n    testCompile 'junit:junit:4.11'\n    runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n\ntest {\n    filter {\n        includeTestsMatching '*succeed*'\n    }\n    testLogging {\n        events 'started', 'skipped', 'failed'\n        displayGranularity = 1\n    }\n}\n\ntask suiteTest(type: Test) {\n    include '**/*Suite.class'\n\n    testLogging {\n        events 'started', 'skipped', 'failed'\n        displayGranularity = 0\n    }\n    reports.html.destination = file(\"${reports.html.destination}/suite\")\n    reports.junitXml.destination = file(\"${reports.junitXml.destination}/suite\")\n}"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\test-logging-control\\normal.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.slf4j:slf4j-api:1.7.7'\n    testCompile 'junit:junit:4.11'\n    runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n\ntest {\n    // nothing\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\test-logging-control\\showEvents.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.slf4j:slf4j-api:1.7.7'\n    testCompile 'junit:junit:4.11'\n    runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n\ntest {\n    testLogging {\n        events 'started', 'skipped', 'failed'\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\test-logging-control\\showStandardStreams.gradle",
    "contents": "apply plugin: 'java'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava]*.options*.encoding = defaultEncoding\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.slf4j:slf4j-api:1.7.7'\n    testCompile 'junit:junit:4.11'\n    runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n\ntest {\n    filter {\n        includeTestsMatching '*succeed*'\n    }\n    testLogging {\n        showStandardStreams = true\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\test-report-control\\build.gradle",
    "contents": "apply plugin: 'java'\napply plugin: 'eclipse'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.slf4j:slf4j-api:1.7.7'\n    testCompile 'junit:junit:4.11'\n    runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n\nsourceSets {\n    sub {\n        java.srcDir file('src/sub/java')\n        compileClasspath = configurations.compile\n    }\n    subTest {\n        java.srcDir file('src/subTest/java')\n        compileClasspath = sourceSets.sub.output + configurations.testCompile\n        runtimeClasspath = output + compileClasspath + configurations.testRuntime\n    }\n}\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava, compileSubJava, compileSubTestJava]*.options*.encoding = defaultEncoding\n\ntest {\n    description = 'src/main/java에 대한 테스트를 실행한다'\n\n    reports.html.destination = file(\"$reports.html.destination/unit-main\")\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/unit-main\")\n}\n\ntask subTest(type: Test) {\n    description = 'src/sub/java에 대한 테스트를 실행한다'\n    group = 'verification'\n    \n    testClassesDir = sourceSets.subTest.output.classesDir\n    classpath = sourceSets.subTest.runtimeClasspath\n\n    reports.html.destination = file(\"$reports.html.destination/unit-sub\")\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/unit-sub\")\n}\n\ntask summaryTestReports(type: TestReport, dependsOn: [test, subTest]) {\n    destinationDir = file(\"$buildDir/reports/tests/unit-summary\")\n    reportOn test, subTest\n}\n\ncheck.dependsOn summaryTestReports"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter08\\test-report-control\\summaryOnly.gradle",
    "contents": "apply plugin: 'java'\napply plugin: 'eclipse'\n\nsourceCompatibility = 1.7\ntargetCompatibility = 1.7\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.slf4j:slf4j-api:1.7.7'\n    testCompile 'junit:junit:4.11'\n    runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n\nsourceSets {\n    sub {\n        java.srcDir file('src/sub/java')\n        compileClasspath = configurations.compile\n    }\n    subTest {\n        java.srcDir file('src/subTest/java')\n        compileClasspath = sourceSets.sub.output + configurations.testCompile\n        runtimeClasspath = output + compileClasspath + configurations.testRuntime\n    }\n}\n\ndef defaultEncoding = 'UTF-8'\n[compileJava, compileTestJava, compileSubJava, compileSubTestJava]*.options*.encoding = defaultEncoding\n\ntest {\n    description = 'src/main/javaに対するテストを実行します'\n\n    reports.html.enabled = false\n\t\n    /* 出力先の指定が残っていても問題ないが、不要なので削除しておく */\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/unit-main\")\n}\n\ntask subTest(type: Test) {\n    description = 'src/sub/javaに対するテストを実行します'\n    group = 'verification'\n    \n    testClassesDir = sourceSets.subTest.output.classesDir\n    classpath = sourceSets.subTest.runtimeClasspath\n\n    reports.html.enabled = false\n\n    /* 出力先の指定が残っていても問題ないが、不要なので削除しておく */\n    reports.junitXml.destination = file(\"$reports.junitXml.destination/unit-sub\")\n}\n\ntask summaryTestReports(type: TestReport, dependsOn: [test, subTest]) {\n    destinationDir = file(\"$buildDir/reports/tests/unit-summary\")\n    reportOn test, subTest\n}\n\ncheck.dependsOn summaryTestReports"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter11\\gradle-jenkins\\build.gradle",
    "contents": "apply plugin: 'java'\napply plugin: 'checkstyle'\napply plugin: 'findbugs'\napply plugin: 'jacoco'\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  testCompile 'junit:junit:4.11'\n}\n\narchivesBaseName = 'gradle-jenkins-sample'\n\n[checkstyle, findbugs]*.ignoreFailures = true\n\nfindbugs {\n  // JDK8를 사용하는 경우 FindBugs2.x가 동작하지 않기 때문에\n  // 명시적으로 FindBugs3.0.0을 지정해두도록 한다\n  toolVersion = '3.0.0'\n}\n\ntask checkstyleTest(overwrite: true) << {}\ntask findbugsTest(overwrite: true) << {}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\archive-name\\build.gradle",
    "contents": "task docsZip(type: Zip) {\n  // <프로젝트 디렉터리>/build/project-docs.zip로 생성\n  destinationDir = file(\"build\")\n  archiveName = \"project-docs.zip\"\n  appendix = \"docs\"\n  classifier = \"jdk15\"\n\n  from (\"src/dist\") {\n    include \"**/*.html\", \"**/*.css\", \"**/*.js\"\n  }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\archive-path-basename\\build.gradle",
    "contents": "task docsZip(type: Zip) {\n  // <프로젝트 디렉터리/project.zip로 생성\n  baseName = \"project\"\n  from (\"src/dist\") {\n    include \"**/*.html\", \"**/*.css\", \"**/*.js\"\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\archive-path-partial\\build.gradle",
    "contents": "task docsZip(type: Zip) {\n  // <프로젝트 디렉터리>/build/docs-jdk15.zip 로 생성\n  destinationDir = file(\"build\")\n  appendix = \"docs\"\n  classifier = \"jdk15\"\n\n  from (\"src/dist\") {\n    include \"**/*.html\", \"**/*.css\", \"**/*.js\"\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\base-plugin-archives\\build.gradle",
    "contents": "// base-plugin-archives/build.gradle\n\nversion = 1.0\n\napply plugin: \"base\"\n\ntask docsZip(type: Zip) {\n // ...\n}\n\ntask printArchiveInfo << {\n  println docsZip.destinationDir\n  println docsZip.baseName\n  println docsZip.version\n  println docsZip.archivePath\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\configure-repositories\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"maven-publish\" // Maven Publish 플러그인 적용\n\n//..\n\ngroup = \"com.example\"\nversion = 0.1\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\ntask sourceJar(type: Jar) {\n  from sourceSets.main.allJava // 소스 세트를 입력 파일로 지정\n}\n\npublishing { // 공개 설정\n  publications {\n    mod1(MavenPublication) { // <mod1>는 임의의 모듈 식별명\n      from components.java // 소프트웨어 컴포넌트 'java'를 공개 대상으로 지정\n      // artifact() 메서드로 공개할 압축 파일이나 파일을 지정\n      artifact sourceJar {\n        classifier \"sources\"\n      }\n    }\n  }\n\n  repositories {\n    maven {\n      name \"local1\" // 리포지토리명. 생략한 경우는 'maven'」\n      url \"build/repo1\" // 디렉터리 지정\n    }\n    maven {\n      name \"remote1\" // 리포지토리명. 생략한 경우는 ''maven'」\n      url \"http://localhost:8081/artifactory/repo1\" // 리포지토리의 URL\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\custom-ivy-file\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"ivy-publish\"\n\ngroup = \"com.example\"\nversion = 0.1\n\n// ...\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\npublishing { // 공개 설정\n  publications {\n    mod1(IvyPublication) {\n      from components.java\n      module = \"my-maven-mod1\" // 미지정인 경우는 project.name 이 사용된다\n      organisation = \"com.example.maven\" // 미지정인 경우는 project.group이 사용된다\n      revision = \"0.1-a\" // 미지정인 경우는 project.version이 사용된다\n\n      descriptor.withXml { xml ->\n        final infoNode = xml.asNode().info[0]\n        final licenseNode = {\n          license {\n            name \"The Apache Software License, Version 2.0\"\n            url \"http://www.apache.org/licenses/LICENSE-2.0.txt\"\n          }\n        }\n        licenseNode.resolveStrategy = Closure.DELEGATE_FIRST\n\n        infoNode.appendNode(\"description\", \"샘플 프로젝트 버전 $version\")\n        infoNode.description + licenseNode\n      }\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\custom-pom\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"maven-publish\"\n\ngroup = \"com.example\"\nversion = 0.1\n\n// ...\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\npublishing { // 공개 설정\n  publications {\n    mod1(MavenPublication) {\n      from components.java\n      artifactId = \"my-maven-mod1\" // 미지정인 경우는 project.name 이 사용된다\n      groupId = \"com.example.maven\" // 미지정인 경우는 project.group이 사용된다\n      version = \"0.1-a\" // 미지정인 경우는 project.version이 사용된다\n\n      pom.withXml { xml ->\n        final myPom = {\n          packaging \"jar\"\n          nama \"My Sample Project\"\n          description \"샘플 프로젝트 버전 $version\"\n          licenses {\n            license {\n              name \"The Apache Software License, Version 2.0\"\n              url \"http://www.apache.org/licenses/LICENSE-2.0.txt\"\n              distribution \"repo\"\n            }\n          }\n        }\n        // description 등 프로젝트 속성을 덮어쓰기한 경우 대책\n        myPom.resolveStrategy = Closure.DELEGATE_FIRST\n\n        xml.asNode().children().last() + myPom\n      }\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\filter-on-zipping\\build.gradle",
    "contents": "version = 1.0\n\ntask docsZip(type: Zip) {\n  from 'docs'\n  into 'userguide'\n  include '**/*.html', '**/*.css'\n\n  final date = new Date()\n  filter { line ->\n    line.replaceAll(/@date@/, date.format('yyyyMMddHHmm'))\n  }\n\n  filter org.apache.tools.ant.filters.TabsToSpaces, tablength: 4\n\n  expand version: project.version\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\global-exclusion\\build.gradle",
    "contents": "// 기본 제외 설정에서 삭제한다\norg.apache.tools.ant.DirectoryScanner.removeDefaultExclude(\"**/.gitignore\")\n\ntask projectZip(type: Zip) {\n  // 프로젝트 디렉터리를 압축한다\n  from (\".\")\n  include \"**/.gitignore\", \"**/*.java\", \"**/*.html\"\n  exclude \".gradle\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\jar-archives\\build.gradle",
    "contents": "version = 1.0\n\ntask sourcesJar(type: Jar) {\n  // 태스크 설정(jar 파일 생성 위치 등)\n  baseName = \"my-library\"\n  appendix = \"sources\"\n  destinationDir = file(\"build\")\n\n  // 압축 구성\n  from(\"src/main/java\") {\n    include \"**/*.java\", \"**/*.groovy\", \"**/*.xml\"\n  }\n  // 매니페스트 설정\n  manifest {\n    attributes(\"Built-By\": \"Gradle\", \"Implementation-Version\": project.version)\n  }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\my-bintray-module\\build.gradle",
    "contents": "buildscript {\n  repositories {\n    jcenter()\n }\n dependencies {\n   // bintray 플러그인을 사용할 수 있게 한다\n   classpath \"com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5\"\n }\n}\n\napply plugin: \"com.jfrog.bintray\" // bintray 플러그인 적용\n\napply plugin: \"java\"\napply plugin: \"maven-publish\"\n\ngroup = \"com.example\"\nversion = 0.1\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\ntask sourceJar(type: Jar) {\n  from sourceSets.main.allJava // 소스 세트를 입력 파일로 설정\n}\n\npublishing {\n  publications {\n    mod1(MavenPublication) { // 모듈 정의 \n      artifactId \"my-bintray-module\"\n\n      from components.java // 소프트웨어 컴포넌트 'java'를 공개 대상으로 지정\n      // artifact() 메서드로 공개할 압축 파일이나 파일을 지정\n      artifact sourceJar {\n        classifier \"sources\"\n      }\n    }\n  }\n}\n\nbintray {\n  user = project.has(\"bintrayUser\") ? bintrayUser : \"\" // Bintray アカウント名\n  key = project.has(\"bintrayKey\") ? bintrayKey : \"\" // Bintray APIキー\n  publications = [\"mod1\"] // Bintray에 업로드하는 모듈\n  publish = true\n  pkg {  // 업로드 위치의 Bintray 패키지 정보\n    repo = \"test1\"\n    name = \"my-pkg\"\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\my-bintray-module-client\\build.gradle",
    "contents": "apply plugin: \"application\"\nmainClassName = \"com.example.Client\"\n\napply plugin: \"java\"\n\nrepositories {\n  // com.example:my-bintray-module:0.1의 의존 라이브러리 취득 위치\n  jcenter()\n\n  // com.example:my-bintray-module:0.1을 취득하는 위치\n  maven {\n    // http://dl.bintray.com/<계정명>/<리포지토리명>\n    url \"http://dl.bintray.com/gradle-book/test1\"\n  }\n}\n\ndependencies {\n  compile \"com.example:my-bintray-module:0.1\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\my-maven-central-module\\build.gradle",
    "contents": "buildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'\n  }\n}\n\nimport groovyx.net.http.HTTPBuilder\nimport static groovyx.net.http.ContentType.*\nimport static groovyx.net.http.Method.*\n\nversion = \"0.1\"\ngroup = \"com.example.gradle.maven\"\n\napply plugin: \"java\"\napply plugin: 'maven-publish'\napply plugin: \"com.jfrog.bintray\"\n\ntask sourcesJar(type: Jar) { // 코드의 JAR 작성 태스크\n  from sourceSets.main.allJava // 소스 세트를 입력 파일로 설정\n}\n  classifier = \"sources\"\n}\n\ntask javadocJar(type: Jar, dependsOn: javadoc) { // Javadoc JAR의 작성 태스크\n  classifier 'javadoc'\n  from javadoc.destinationDir // Javadoc의 대상 디렉터리를 입력 파일로 지정\n}\n\njar.dependsOn sourcesJar, javadocJar // jar 태스크 실행 시에 코드 JAR와 Javadoc JAR도 작성한다\n\n// Bintray의 REST API를 이용해서 업로드한 모듈에 서명하는 태스크\ntask signBintrayPackage << {\n  final http = new HTTPBuilder(bintray.apiUrl) // 「bintray」는 빈트레이 플러그인에 의해 설정되는 속성\n\n  // BASIC 인증\n  http.auth.basic bintrayUser, bintrayKey\n\n  // Bintray의 REST API 요청\n  http.request(POST, JSON) {\n    uri.path = \"/gpg/${bintrayUser}/${bintray.pkg.repo}/${bintray.pkg.name}/versions/${project.version}\"\n    body = [passphrase: signKeyPassphrase]\n    response.success = { resp ->\n      logger.info(\"Signed version ${project.version}.\")\n    }\n    response.failure = { resp ->\n      throw new GradleException(\"Could not sign version ${project.version}: $resp.statusLine\")\n    }\n  }\n}\n\npublishing {\n  publications {\n    mod1(MavenPublication) {\n      from components.java\n      artifact sourcesJar // 코드 JAR를 모듈에 포함한다\n      artifact javadocJar // Javadoc JAR를 모듈에 포함한다\n\n      final customPom = { // Maven Central 리포지토리가 요구하는 POM\n        packaging \"jar\"\n        name \"Gradle XXX Plugin\"\n        url \"https://example.com/module-site/xxx\"\n        description \"This is a sample module for mvn central.\"\n        licenses {\n          license {\n            name \"The Apache Software License, Version 2.0\"\n            url \"http://www.apache.org/licenses/LICENSE-2.0.txt\"\n            distribution \"repo\"\n          }\n        }\n        scm {\n          url \"https://github.com/xxx/xxx\"\n          connection \"https://github.com/xxx/xxx\"\n        }\n        developers {\n          developer {\n            id \"my-name-id\"\n            name \"Taro Gradle\"\n            email \"xxx@example.com\"\n          }\n        }\n      }\n      customPom.resolveStrategy = Closure.DELEGATE_FIRST\n\n      pom.withXml { xml ->\n        final root = xml.asNode()\n        root.children().last() + customPom\n      }\n    }\n  }\n}\n\nbintray {\n  user = bintrayUser\n  key = bintrayKey\n  publications = [\"mod1\"]\n  pkg {\n    repo = \"test1\"\n    name = \"my-pkg-2\"\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\nested-copyspec\\build.gradle",
    "contents": "task docsZip(type: Zip) {\n  // 압축한 것을 docs-1 디렉터리에 추가한다\n  into \"docs-1\"\n  // base.css를 압축 대상으로 한다\n  include \"**/base.css\"\n  // 빈 디렉터리는 제외한다\n  includeEmptyDirs = false\n\n  // 압축한 것을 release-note 디렉터리에 추가한다\n  into(\"release-notes\") {\n    // docs 디렉터리로부터\n    from \"docs\"\n    // release-note.html를 압축한다\n    include \"release-note.html\"\n  }\n\n  // 압축한 것을 userguide 디렉터리에 추가\n  into(\"userguide\") {\n    // docs 디렉터리의\n    from(\"docs\") {\n      // HTML 파일을 압축한다\n      include \"**/*.html\"\n      // 단, 출시 안내서는 이 디렉터리에 포함하지 않는다\n      exclude \"release-note.html\"\n    }\n    // sample 디렉터리의\n    from(\"sample\") {\n      // Java 파일을 압축한다\n      include \"**/*.java\"\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\publications-ivy-for-softwarecomponent\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"ivy-publish\" // Ivy Publish 플러그인 적용\n\n// ...\n\ngroup = \"com.example\"\nversion = 0.1\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\npublishing { // 공개 설정\n  publications {\n    mod1(IvyPublication) { // <mod1>는 임의의 모듈 식별명\n      from components.java // 소프트웨어 컴포넌트 'java'를 공개 대상으로 지정\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\publications-maven-for-softwarecomponent\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"maven-publish\" // Ivy 리포지토리에 공개하는 경우는 ivy-publish를 적용\n\ngroup = \"com.example\"\nversion = 0.1\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\npublishing { // 공개 설정\n  publications {\n    mod1(MavenPublication) { // <mod1>는 임의의 모듈 식별명. 아이비의 경우는 IvyPublication\n      from components.java // 소프트웨어 컴포넌트 'java'를 모듈에 등록\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\publishing-artifacts\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"maven-publish\" // Ivy 리포지토리에 공개하는 경우는 ivy-publish 적용\n\n//...\n\ngroup = \"com.example\"\nversion = 0.1\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\ntask sourceJar(type: Jar) {\n  classifier 'sources'\n  from sourceSets.main.allJava // 소스 세트를 입력 파일로 지정\n}\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n  classifier 'javadoc'\n  from javadoc.destinationDir // Javadoc의 대상 디렉터리를 입력 파일로 지정\n}\n\npublishing {\n  publications {\n    mod1(MavenPublication) { // <mod1>는 임의의 모듈 식별명\n      from components.java // 소프트웨어 컴포넌트 'java'를 공개 대상으로 지정\n      // artifact() 메서드로 공개할 압축 파일이나 파일을 지정\n      artifact(sourceJar) // 태스크명을 지정하면 해당 태스크에 의해 출력 파일이 공개된다\n      artifact(javadocJar)\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\publishing-files\\build.gradle",
    "contents": "apply plugin: \"maven-publish\" // Maven Publish 플러그인 적용\n\ngroup = \"com.example\"\nversion = 0.1\n\npublishing {\n  publications {\n    docs(MavenPublication) {\n      artifactId 'project-docs-list'  // 미설정인 경우는 project.name 이 사용된다\n      artifact('my-docs-index.htm') { // artifact() 메서드로 파일을 직접 아티팩트로 설정\n        extension 'html'\n      }\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\publishing-ivy-artifacts\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"ivy-publish\" // Ivy Publish 플러그인 적용\n\n//...\n\ngroup = \"com.example\"\nversion = 0.1\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\ntask sourceJar(type: Jar) {\n  classifier 'sources'\n  from sourceSets.main.allJava // 소스 세트를 입력 파일로 지정\n}\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n  classifier 'javadoc'\n  from javadoc.destinationDir\n}\n\npublishing {\n  publications {\n    mod1(IvyPublication) { // <mod1>는 임의의 모듈 식별명\n      from components.java // 소프트웨어 컴포넌트 'java'를 공개 대상으로 지정\n      // artifact() 메서드로 공개할 압축 파일이나 파일을 지정\n      artifact(sourceJar) { // 태스크명을 지정하면 해당 태스크에 의해 출력 파일이 공개된다\n        type 'source'\n      }\n      artifact(javadocJar) {\n        type 'doc'\n      }\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\publishing-maven-repository\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"maven-publish\" // maven-publish 플러그인 적용\napply plugin: \"ivy-publish\" // ivy-publish 플러그인 적용\n\n//...\n\ngroup = \"com.example\"\nversion = 0.1\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\ntask sourceJar(type: Jar) {\n  classifier 'sources'\n  from sourceSets.main.allJava // 소스 세트를 입력 파일로 지정\n}\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n  classifier 'javadoc'\n  from javadoc.destinationDir\n}\n\npublishing {\n  publications {\n    pub1(IvyPublication) { // <pub1>는 임의의 공개명\n      from components.java // 소프트웨어 컴포넌트 'java'를 공개 대상으로 지정\n      // artifact() 메서드로 공개할 압축 파일이나 파일을 지정\n      artifact(sourceJar) // 태스크명을 지정하면 해당 태스크에 의해 출력 파일이 공개된다\n      artifact(javadocJar)\n    }\n  }\n  repositories {\n    ivy {\n      url \"sftp://localhost:22/tmp/repository\"\n      credentials {\n        username 'masatoshi_hayashi'\n        password 'D1ddlddl'\n      }\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\rename-files\\build.gradle",
    "contents": "final docTheme = \"BLUE\"\n\ntask docsZip(type: Zip) {\n  into(\"userguide\") {\n    from(\"docs\") {\n      include \"**/*.html\", \"**/*.css\"\n      rename { originalName ->\n        if (originalName == \"release-note.html\")\n            return \"release-note-${new Date().format('yyyyMMddHHmm')}.html\"\n      }\n      rename(/THEME_${docTheme}-(.*\\.css)/, '$1')\n    }\n  }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\sftp-repository\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"ivy-publish\" // Ivy Publish 플러그인 적용\n\n//..\n\ngroup = \"com.example\"\nversion = 0.1\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\ntask sourceJar(type: Jar) {\n  from sourceSets.main.allJava // 소스 세트를 입력 파일로 지정\n}\n\npublishing { // 공개 설정\n  publications {\n    mod1(IvyPublication) { // <mod1>는 임의의 모듈 식별명\n      from components.java // 소프트웨어 컴포넌트 'java'를 공개 대상으로 지정\n      // artifact() 메서드로 공개할 압축 파일이나 파일을 지정\n      artifact sourceJar {\n        classifier \"sources\"\n      }\n    }\n  }\n\n  repositories {\n    ivy {\n      credentials {\n        username 'my-name'\n        password 'xxxxxx'\n      }\n      url \"sftp://localhost:22/tmp/repo1\" // sftp 형식으로 리포지토리 정의\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\simple-from-archive\\build.gradle",
    "contents": "task docsZip(type: Zip) {\n  // docs 디렉터리에서 압축에 포함할 파일을 가져온다\n  from \"docs\"\n  // 압축할 파일은 CSS 파일과 HTML 파일\n  include \"**/*.css\", \"**/*.html\"\n  // docs/single.html는 포함하지 않는다\n  exclude \"single.html\"\n  // 빈 디렉터리는 포함하지 않는다\n  includeEmptyDirs = false\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\simple-from-archive-into\\build.gradle",
    "contents": "task docsZip(type: Zip) {\n  // docs 디렉터리에서 압축할 파일을 가져온다\n  from \"docs\"\n  // 압축 파일 내의 userguide 디렉터리에 압축할 파일을 추가한다\n  into \"userguide\"\n  // 압축할 파일은 css 파일과 html 파일\n  include \"**/*.css\", \"**/*.html\"\n  // docs/single.html는 제외한다\n  exclude \"single.html\"\n  // 빈 디렉터리는 제외한다\n  includeEmptyDirs = false\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\software-comp-java\\build.gradle",
    "contents": "apply plugin: \"java\"\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  runtime \"org.apache.commons:commons-lang3:3.3.1\"\n}\n\ntask showSoftwareComponent << {\n  // 소프트웨어 컴포넌트 'java'의 정보 출력\n\n  println \"---Artifacts---\"\n  for (a in components.java.usages.artifacts) {\n    println a.file //-> <프로젝트>/build/libs/<프로젝트명>.jar\n  }\n\n  println \"---Dependencies---\"\n  for (d in components.java.usages.dependencies) {\n    println d //-> \"org.apache.commons:commons-lang3:3.3.1\" 관련 정보\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\tar-archives\\build.gradle",
    "contents": "task docsTar(type: Tar) {\n  baseName = \"project-docs\"\n  compression = Compression.BZIP2 // 압축 방식 설정\n\n  // 압축 구성\n  into (\"docs\") {\n    from (zipTree(\"src/dist/embedded.zip\")) {\n      include \"**/*.html\", \"**/*.css\", \"**/*.js\"\n    }\n    from (\"src/dist\") {\n      include \"**/*.html\", \"**/*.css\", \"**/*.js\"\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\war-archives\\build.gradle",
    "contents": "version = 1.0\n\ntask myWar(type: War) {\n    // 태스크 설정(파일 생성 위치 등)\n    baseName = \"my-war\"\n    destinationDir = file(\"build\")\n\n    // 압축 구성\n    from(\"webapp\") {\n      include \"**/*.html\", \"**/*.js\", \"**/*.css\"\n    }\n    // 라이브러리 JAR 설정\n    classpath fileTree(\"lib\")\n    // WEB-INF 구성\n    webInf {\n      into(\"classes\") {\n        from (\"out\") {\n          include \"**/*.class\"\n        }\n      }\n    }\n\n    webXml file(\"web.xml\")\n\n    manifest {\n     attributes(\"Built-By\": \"Gradle\", \"Implementation-Version\": project.version)\n   }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter12\\zip-archives\\build.gradle",
    "contents": "task docsZip(type: Zip) {\n  // 태스크 설정(zip 파일 생성 위치, 압축 레벨 등)\n  baseName = \"project-docs\"\n  entryCompression = ZipEntryCompression.STORED\n\n  // 압축 구성\n  // 'docs'에 'src/dist' 디렉터리와 embedded.zip의 html, css, js 파일을 모두 추가\n  into (\"docs\") {\n    from (zipTree(\"src/dist/embedded.zip\")) {\n      include \"**/*.html\", \"**/*.css\", \"**/*.js\"\n    }\n    from (\"src/dist\") {\n      include \"**/*.html\", \"**/*.css\", \"**/*.js\"\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\build-comparing-basic\\build.gradle",
    "contents": "// 빌드 비교 플러그인 적용\napply plugin: 'compare-gradle-builds'\n\ncompareGradleBuilds { // 빌드 비교 플러그인 설정 블록\n  sourceBuild { // 비교 원본 빌드\n    projectDir \"project-a\" // 빌드의 루트 디렉터리\n    gradleVersion \"1.12\"   // 빌드에 사용하는 그래들 버전\n  }\n  targetBuild { // 비교 대상 빌드\n    projectDir \"project-b\" // 빌드의 루트 디렉터리\n    gradleVersion \"2.0\"    // 빌드에 사용하는 그래들 버전\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\build-comparing-basic\\project-a\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"application\"\n\nversion = 1.0\n\nmainClassName = \"com.example.Hello\"\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\build-comparing-basic\\project-b\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"application\"\n\nversion = 1.1\n\nmainClassName = \"com.example.Hello\"\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\build-comparing-tar\\build.gradle",
    "contents": "// 빌드 비교 플러그인 적용\napply plugin: 'compare-gradle-builds'\n\ncompareGradleBuilds { // 빌드 비교 플러그인 설정 블록\n  sourceBuild { // 비교 기준 빌드\n    projectDir = \"source-build\" // 빌드의 루트 디렉터리\n    gradleVersion = \"1.12\"   //  빌드에 사용하는 그래들 버전\n    tasks = [\"docsTar\"] // 빌드로 실행하는 태스크\n    arguments = [\"-PdocsVersion=0.2\"] // 빌드 시 커맨드라인 인수\n  }\n  targetBuild { // 比較先ビルド(ターゲットビルド)\n    projectDir = \"source-build\" // 빌드의 루트 디렉터리\n    gradleVersion = \"2.0\"    //  빌드에 사용하는 그래들 버전\n    tasks = [\"docsTar\"] // 빌드로 실행하는 태스크\n    arguments = [\"-PdocsVersion=0.2\"] // 빌드 시 커맨드라인 인수\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\build-comparing-tar\\source-build\\build.gradle",
    "contents": "configurations {\n  archives\n}\n\ntask docsTar(type: Tar) {\n  baseName \"project-doc-${docsVersion}\"\n  from \"docs\"\n}\n\nartifacts {\n  archives docsTar\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\build-comparing-version\\build.gradle",
    "contents": "apply plugin: \"java\"\napply plugin: \"compare-gradle-builds\"\n\n// 중략\n\napply plugin: \"application\"\n\nversion = 1.0\n\nmainClassName = \"com.example.Hello\"\n\ncompareGradleBuilds {\n  targetBuild {\n    gradleVersion \"2.0\"\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\build-comparing-zip\\build.gradle",
    "contents": "// 빌드 비교 플러그인 적용\napply plugin: 'compare-gradle-builds'\n\ncompareGradleBuilds { // 빌드 비교 플러그인 설정 블록\n  sourceBuild { // 비교 원본 빌드(소스 빌드)\n    projectDir = \"source-build\" // 빌드의 루트 디렉터리\n    gradleVersion = \"1.12\"   //빌드에 사용하는 그래들 버전\n    tasks = [\"docsZip\"] // 빌드로 실행하는 태스크\n    arguments = [\"-PdocsVersion=0.2\"] // 빌드 시의 커맨드라인 인수\n  }\n  targetBuild { // 비교 대상 빌드\n    projectDir = \"source-build\" // 빌드의 루트 디렉터리\n    gradleVersion = \"2.0\"    // 빌드에 사용하는 그래들 버전\n    tasks = [\"docsZip\"] // 빌드로 실행하는 태스크\n    arguments = [\"-PdocsVersion=0.2\"] // 빌드 시의 커맨드라인 인수\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\build-comparing-zip\\source-build\\build.gradle",
    "contents": "configurations {\n  archives\n}\n\ntask docsZip(type: Zip) {\n  baseName \"project-doc-${docsVersion}\"\n  from \"docs\"\n}\n\nartifacts {\n  archives docsZip\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\buildsrc-project\\build.gradle",
    "contents": "// build.gradle\ntask run << {\n  final greeting = new Greeting(content: \"Hello\")\n  printGreeting(greeting)\n}\n\nvoid printGreeting(Greeting greeting) {\n  println \"Greeting: $greeting.content\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\custom-task\\build.gradle",
    "contents": "task myTask(type: MyTask) { // 스크립트 평가 단계(Task 객체 작성 시)에 실행\n  target = \"world\"\n}\n\nclass MyTask extends DefaultTask {\n  String target\n  MyTask() {\n    this << {\n      println \"Hello, $target!\" 스크립트 실행 단계에 실행\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\custom-task-annotation\\build.gradle",
    "contents": "task myTask(type: MyTask) { // 스크립트 평가 단계(Task 객체 작성 시)에 실행\n  target = \"world\"\n}\n\nclass MyTask extends DefaultTask {\n  String target\n\n  @TaskAction\n  void greet() {\n    println \"Hello, $target!\" // 스크립트 실행 단계에 실행\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\default-task-project\\build.gradle",
    "contents": "task myTask(type: DefaultTask) << {\n    println \"Hello, world!\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\default-task-project\\settings.gradle",
    "contents": "/*\n * This settings file was auto generated by the Gradle buildInit task\n * by 'masatoshi_hayashi' at '14/04/12 20:47' with Gradle 1.11\n *\n * The settings file is used to specify which projects to include in your build.\n * In a single project build this file can be empty or even removed.\n *\n * Detailed information about configuring a multi-project build in Gradle can be found\n * in the user guide at http://gradle.org/docs/1.11/userguide/multi_project_builds.html\n */\n\n/*\n// To declare projects as part of a multi-project build use the 'include' method\ninclude 'shared'\ninclude 'api'\ninclude 'services:webservice'\n*/\n\nrootProject.name = 'default-task-project'\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\extension-object\\build.gradle",
    "contents": "apply plugin: GreetingPlugin // 사용자 정의 플러그인 적용\n\ngreeting { // GreetingPlugin에 의해 추가된 greeting 블록\n  message(\"Hi\", \"world\")\n}\n\n // Plugin을 implement한 사용자 정의 플러그인 클래스\nclass GreetingPlugin implements Plugin<Project> {\n   // 이 플러그인이 적용될 때 호출되는 메서드\n  void apply(Project project) {\n    // 프로젝트에 greeting extension 추가\n    project.extensions.create(\"greeting\", GreetingExtension)\n    // 프로젝트에 'greet' 태스크 추가\n    project.task(\"greet\") << {\n      println \"${project.greeting.greeting}, ${project.greeting.target}!\"\n    }\n  }\n}\n\n// greeting extension을 표현하는 클래스\nclass GreetingExtension {\n  String greeting\n  String target\n  void message(greeting, target) {\n    this.greeting = greeting\n    this.target = target\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\external-libraries\\build.gradle",
    "contents": "// build.gradle\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    classpath \"org.apache.commons:commons-lang3:3.3.1\"\n  }\n}\n\nimport org.apache.commons.lang3.StringUtils\n\ntask run << {\n  println StringUtils.removeEnd(\"http://www.gradle.org/\", \"/\")\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\external-script-plugin\\build.gradle",
    "contents": "apply from: \"https://gist.githubusercontent.com/literalice/639c845fe7ea4b7b6ce0/raw/1c254a53460a0afa3fd64b98662d8eb74a93cf2d/gistfile1.groovy\"\n\ntask run(dependsOn: \"externalTask\") << {\n  println \"task execution is complete.\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\import-remote-script\\build.gradle",
    "contents": "apply from: \"https://raw.githubusercontent.com/literalice/sample-flying-saucer/master/build.gradle\"\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\local-libraries\\build.gradle",
    "contents": "// build.gradle\nbuildscript {\n  repositories {\n    flatDir dir: \"lib\" // lib/mycompany-gradle-tasks-1.0.jar에 라이브러리 배치\n  }\n  dependencies {\n    classpath \"com.example:mycompany-gradle-tasks:1.0\"\n  }\n}\n\napply plugin: \"war\"\n\nimport com.example.mycompany.gradle.tasks.Deploy\n\ntask deploy(type: Deploy) {\n  description = \"사용자 정의 태스크로 War를 배포한다\"\n\n  url \"http://mycompany-server.example.com\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\local-libraries\\mycompany-gradle-tasks\\build.gradle",
    "contents": "apply plugin: 'java'\n\ngroup = \"com.example\"\nversion = \"1.0\"\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile gradleApi()\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\local-libraries\\mycompany-gradle-tasks\\settings.gradle",
    "contents": "rootProject.name = 'mycompany-gradle-tasks'\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\multiproject-injections\\build.gradle",
    "contents": "// build.gradle 부모 프로젝트\n\next {\n  prop1 = \"root prop\" // 부모 프로젝트의 속성\n}\nproject(\":child1\") { // 자식 프로젝트 child1에 주입\n  ext {\n    prop3 = \"injected child prop\" // 속성 주입\n  }\n  task injectedTask << { // 태스크 주입\n    println \"from a injected task\"\n    // 자식 프로젝트 child1의 속성, 부모 프로젝트로부터 상속된 메소드 호출\n    printProp(prop2)\n  }\n}\n\ntask run << {\n  println \"from a root task\"\n  printProp(prop1)\n}\n\nvoid printProp(String prop) {\n  println \"Prop: $prop\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\multiproject-injections\\child1\\build.gradle",
    "contents": "// child1/build.gradle 자식 프로젝트\next {\n  prop2 = \"child prop1\"\n}\n\n// 부모 프로젝트에서 주입된 태스크를 참조\ntask run(dependsOn: \"injectedTask\") << {\n  println \"from a child task\"\n  // 부모 프로젝트에서 상속된 메서드, 속성 호출\n  printProp(prop1)\n  // 부모 프로젝트에서 주입된 속성 호출\n  printProp(prop3)\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\multiproject-injections\\settings.gradle",
    "contents": "// settings.gradle\ninclude \"child1\"\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\plugin-name\\build.gradle",
    "contents": "apply plugin: \"greeting\" // 사용자 정의 플러그인 적용\n\ngreeting { // GreetingPlugin에 의해 추가된 greeting 블록\n  message(\"Hi\", \"world\")\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\profile-settings\\build.gradle",
    "contents": "// build.gradle\napply from: \"${profile}.gradle\"\ntask run << {\n    println serverUrl\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\profile-settings\\development.gradle",
    "contents": "// development.gradle\next {\n    serverUrl = \"localhost\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\profile-settings\\production.gradle",
    "contents": "// production.gradle\next {\n    serverUrl = \"www.example.com\"\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\simple-plugin\\build.gradle",
    "contents": "// build.gradle\n\napply plugin: GreetingPlugin // 사용자 정의 플러그인 적용\n\nclass GreetingPlugin implements Plugin<Project> { // Plugin을 implement한 사용자 정의 플러그인 클래스\n  void apply(Project project) { // 이 플러그인이 적용될 때 호출되는 메서드\n    project.task(\"greet\") << { // 프로젝트에 'greet' 태스크 추가\n      println \"Hello, world!\"\n    }\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter13\\test-task\\build.gradle",
    "contents": "task myTask(type: MyTask) { // 스크립트 평가 단계(Task 객체 작성 시)에 실행\n  target = \"world\"\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\ant-import-checkstyle\\build.gradle",
    "contents": "repositories {\n    mavenCentral() // Maven Central 리포지토리 사용한다\n}\n\nconfigurations {\n    antTasks // 앤트 태스크의 의존 관계를 저장하는 컨피겨레이션\n}\n\ndependencies {\n    // Checkstyle 라이브러리 의존 관계 선언\n    antTasks \"com.puppycrawl.tools:checkstyle:5.7\"\n}\n\nversion = \"1.1\"\n\nant.importBuild \"build.xml\"\n\nant.properties.version = version\n\ntask check << {\n    // // 컨피겨레이션에서 checkstyle 태스크 읽기\n    ant.taskdef(resource: \"checkstyletask.properties\", classpath: configurations.antTasks.asPath)\n\n    ant.checkstyle(config: \"checkstyle/checkstyle.xml\") { // checkstyle 태스크 설정\n        fileset(dir: ant.properties.src)\n        property(key: \"checkstyle.cache.file\", file: \"checkstyle/cache\")\n        formatter(type: \"xml\", toFile: \"checkstyle/checkstyle_errors.xml\")\n    }\n}\n\ncompile.dependsOn check // compile 전에 check 태스크 실행\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\ant-import-property-ref\\build.gradle",
    "contents": "version = \"1.1\"\n\nant.importBuild \"build.xml\"\n\nant.properties.version = version // build.xml의 version 속성 덮어쓰기\n\ntask war(type: War, dependsOn: \"jar\") { // build.xml의 jar 타깃 참조\n    description = \"war 파일을 작성\"\n\n    baseName = \"ant-sample\" // war 파일의 이름\n    version = project.version // 파일명에 추가되는 버전\n\n    destinationDir = file(\"dist\")// war 파일 출력 위치\n\n    // war 구성\n    from(\"web\") {\n        include(\"index.html\")\n    }\n    // build.xml의 속성 참조\n    classpath(\"${ant.properties.dist}/lib/${ant.project.name}-${version}.jar\")\n    webInf {\n        from (\"web/WEB-INF\")\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\ant-import-simple\\build.gradle",
    "contents": "// build.gradle\n\nant.importBuild \"build.xml\"\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\ant-import-war\\build.gradle",
    "contents": "version = \"1.1\"\n\nant.importBuild \"build.xml\"\n\ntask war(type: War, dependsOn: \"jar\") { // build.xml의 jar 타깃 참조\n    description = \"war 파일을 작성\"\n\n    baseName = \"ant-sample\" // war 파일 이름\n    version = project.version // 파일명에 추가되는 버전\n\n    destinationDir = file(\"dist\")// war 파일 출력 위치\n\n    // war 파일 구성\n    from(\"web\") {\n        include(\"index.html\")\n    }\n    classpath(\"dist/lib/sample-ant-project-0.1.jar\")\n    webInf {\n        from (\"web/WEB-INF\")\n    }\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\maven-gradle-transitive-deps\\build.gradle",
    "contents": "apply plugin: \"java\"\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile('org.codehaus.groovy:groovy-all:2.0.4') {\n      // force = true\n  }\n  testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'\n}\n\ntask showDeps << {\n  configurations.testCompile.each {\n    println it.absolutePath\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\my-maven-project\\build.gradle",
    "contents": "// 생성되는 build.gradle\n\napply plugin: 'java'\napply plugin: 'maven'\n\ngroup = 'com.example' // <- pom.xml의 groupId 요소로부터\nversion = '1.0-SNAPSHOT' // <- pom.xml의 version 요소로부터\n\ndescription = \"\"\"My sample maven project\"\"\" // <- pom.xml의 name 요소로부터\n\nsourceCompatibility = 1.5\ntargetCompatibility = 1.5\n\nrepositories {\n     maven { url \"http://repo.maven.apache.org/maven2\" }\n}\ndependencies {\n    testCompile group: 'junit', name: 'junit', version:'3.8.1'\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\my-maven-project\\settings.gradle",
    "contents": "// 生成されるsettings.gradle\n\nrootProject.name = 'my-maven-project' // <- pom.xmlのartifactId要素から\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\simple-parent\\build.gradle",
    "contents": "  // 생성되는 build.gradle\n\nallprojects  {\n  apply plugin: 'maven'\n\n  group = 'com.example'\n  version = '0.1-SNAPSHOT'\n}\n\nsubprojects {\n  apply plugin: 'java'\n\n  sourceCompatibility = 1.5\n  targetCompatibility = 1.5\n\n  task packageSources(type: Jar) {\n    classifier = 'sources'\n    from sourceSets.main.allSource\n  }\n  artifacts.archives packageSources\n\n  repositories {\n    mavenLocal()\n    maven { url \"http://repo.maven.apache.org/maven2\" }\n  }\n  \n  dependencies {\n    testCompile group: 'junit', name: 'junit', version:'3.8.1'\n  }\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\simple-parent\\settings.gradle",
    "contents": "// 生成されるsettings.gradle\n\nrootProject.name = 'simple-parent'\ninclude ':simple-jar'\ninclude ':simple-webapp'\n\nproject(':simple-jar').projectDir = \"$rootDir/simple-jar\" as File\nproject(':simple-webapp').projectDir = \"$rootDir/simple-webapp\" as File\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\simple-parent\\simple-jar\\build.gradle",
    "contents": "description = 'My multi-mudule simple jar project'\n\ndependencies {\n    compile group: 'log4j', name: 'log4j', version:'1.2.14'\n    compile group: 'dom4j', name: 'dom4j', version:'1.6.1'\n    compile group: 'jaxen', name: 'jaxen', version:'1.1.1'\n    compile group: 'velocity', name: 'velocity', version:'1.5'\n    testCompile group: 'commons-io', name: 'commons-io', version:'1.3.2'\n}\n\ntask packageTests(type: Jar) {\n  from sourceSets.test.output\n  classifier = 'tests'\n}\nartifacts.archives packageTests\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\simple-parent\\simple-webapp\\build.gradle",
    "contents": "// 생성되는 simple-webapp 프로젝트의 build.gradle\n\napply plugin: 'war'\n\ndescription = 'My multi-module simple web application project'\n\ndependencies {\n  compile group: 'org.apache.geronimo.specs', name: 'geronimo-servlet_2.4_spec', version:'1.1.1'\n  compile project(':simple-jar')\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\simple-super-pom\\my-project\\build.gradle",
    "contents": "apply plugin: 'java'\napply plugin: 'maven'\n\ngroup = 'com.example'\nversion = '2.0'\n\ndescription = \"\"\"\"\"\"\n\nsourceCompatibility = 1.5\ntargetCompatibility = 1.5\n\nrepositories {\n     maven { url \"http://repo.maven.apache.org/maven2\" }\n}\ndependencies {\n    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.3' // 부모 POM의 속성을 사용한 의존 관계\n    testCompile group: 'junit', name: 'junit', version:'4.0' // 부모 POM의 의존 관계\n}\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\simple-super-pom\\my-project\\settings.gradle",
    "contents": "rootProject.name = 'my-project'\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\testng-pom\\build.gradle",
    "contents": "  // 변환되는 build.gradle\n\nallprojects  {\n  apply plugin: 'maven'\n\n  group = 'com.example'\n  version = '0.1-SNAPSHOT'\n}\n\nsubprojects {\n  apply plugin: 'java'\n  sourceCompatibility = 1.5\n  targetCompatibility = 1.5\n\n  task packageSources(type: Jar) {\n    classifier = 'sources'\n    from sourceSets.main.allSource\n  }\n  artifacts.archives packageSources\n\n  repositories {\n    mavenLocal()\n    maven { url \"http://repo.maven.apache.org/maven2\" }\n  }\n  \n  dependencies {\n    testCompile group: 'org.testng', name: 'testng', version:'6.1.1'\n  }\n  test.useTestNG()\n}\n\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\testng-pom\\settings.gradle",
    "contents": "rootProject.name = 'simple-parent'\ninclude ':simple-jar'\ninclude ':simple-webapp'\n\nproject(':simple-jar').projectDir = \"$rootDir/simple-jar\" as File\nproject(':simple-webapp').projectDir = \"$rootDir/simple-webapp\" as File"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\testng-pom\\simple-jar\\build.gradle",
    "contents": "\ndescription = 'My multi-mudule simple jar project'\ndependencies {\n    compile group: 'log4j', name: 'log4j', version:'1.2.14'\n    compile group: 'dom4j', name: 'dom4j', version:'1.6.1'\n    compile group: 'jaxen', name: 'jaxen', version:'1.1.1'\n    compile group: 'velocity', name: 'velocity', version:'1.5'\n    testCompile group: 'commons-io', name: 'commons-io', version:'1.3.2'\n}\n\ntask packageTests(type: Jar) {\n  from sourceSets.test.output\n  classifier = 'tests'\n}\nartifacts.archives packageTests\n"
  },
  {
    "fullPath": "C:\\Users\\ysh\\Downloads2\\006791-master (1)\\006791-master\\chapter14\\testng-pom\\simple-webapp\\build.gradle",
    "contents": "\napply plugin: 'war'\n\ndescription = 'My multi-module simple web application project'\ndependencies {\n    compile group: 'org.apache.geronimo.specs', name: 'geronimo-servlet_2.4_spec', version:'1.1.1'\n  compile project(':simple-jar')\n}\n"
  }
]